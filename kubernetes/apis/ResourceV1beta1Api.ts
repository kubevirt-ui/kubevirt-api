/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  IoK8sApiResourceV1beta1DeviceClass,
  IoK8sApiResourceV1beta1DeviceClassFromJSON,
  IoK8sApiResourceV1beta1DeviceClassList,
  IoK8sApiResourceV1beta1DeviceClassListFromJSON,
  IoK8sApiResourceV1beta1DeviceClassToJSON,
  IoK8sApiResourceV1beta1ResourceClaim,
  IoK8sApiResourceV1beta1ResourceClaimFromJSON,
  IoK8sApiResourceV1beta1ResourceClaimList,
  IoK8sApiResourceV1beta1ResourceClaimListFromJSON,
  IoK8sApiResourceV1beta1ResourceClaimTemplate,
  IoK8sApiResourceV1beta1ResourceClaimTemplateFromJSON,
  IoK8sApiResourceV1beta1ResourceClaimTemplateList,
  IoK8sApiResourceV1beta1ResourceClaimTemplateListFromJSON,
  IoK8sApiResourceV1beta1ResourceClaimTemplateToJSON,
  IoK8sApiResourceV1beta1ResourceClaimToJSON,
  IoK8sApiResourceV1beta1ResourceSlice,
  IoK8sApiResourceV1beta1ResourceSliceFromJSON,
  IoK8sApiResourceV1beta1ResourceSliceList,
  IoK8sApiResourceV1beta1ResourceSliceListFromJSON,
  IoK8sApiResourceV1beta1ResourceSliceToJSON,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
  IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
} from '../models';

export interface CreateResourceV1beta1DeviceClassRequest {
  body: IoK8sApiResourceV1beta1DeviceClass;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface CreateResourceV1beta1NamespacedResourceClaimRequest {
  namespace: string;
  body: IoK8sApiResourceV1beta1ResourceClaim;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface CreateResourceV1beta1NamespacedResourceClaimTemplateRequest {
  namespace: string;
  body: IoK8sApiResourceV1beta1ResourceClaimTemplate;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface CreateResourceV1beta1ResourceSliceRequest {
  body: IoK8sApiResourceV1beta1ResourceSlice;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface DeleteResourceV1beta1CollectionDeviceClassRequest {
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta1CollectionNamespacedResourceClaimRequest {
  namespace: string;
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta1CollectionNamespacedResourceClaimTemplateRequest {
  namespace: string;
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta1CollectionResourceSliceRequest {
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta1DeviceClassRequest {
  name: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta1NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta1NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta1ResourceSliceRequest {
  name: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListResourceV1beta1DeviceClassRequest {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta1NamespacedResourceClaimRequest {
  namespace: string;
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta1NamespacedResourceClaimTemplateRequest {
  namespace: string;
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta1ResourceClaimForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta1ResourceClaimTemplateForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta1ResourceSliceRequest {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface PatchResourceV1beta1DeviceClassRequest {
  name: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta1NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta1NamespacedResourceClaimStatusRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta1NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta1ResourceSliceRequest {
  name: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface ReadResourceV1beta1DeviceClassRequest {
  name: string;
  pretty?: string;
}

export interface ReadResourceV1beta1NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReadResourceV1beta1NamespacedResourceClaimStatusRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReadResourceV1beta1NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReadResourceV1beta1ResourceSliceRequest {
  name: string;
  pretty?: string;
}

export interface ReplaceResourceV1beta1DeviceClassRequest {
  name: string;
  body: IoK8sApiResourceV1beta1DeviceClass;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta1NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  body: IoK8sApiResourceV1beta1ResourceClaim;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta1NamespacedResourceClaimStatusRequest {
  name: string;
  namespace: string;
  body: IoK8sApiResourceV1beta1ResourceClaim;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta1NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  body: IoK8sApiResourceV1beta1ResourceClaimTemplate;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta1ResourceSliceRequest {
  name: string;
  body: IoK8sApiResourceV1beta1ResourceSlice;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface WatchResourceV1beta1DeviceClassRequest {
  name: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1DeviceClassListRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1NamespacedResourceClaimListRequest {
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1NamespacedResourceClaimTemplateListRequest {
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1ResourceClaimListForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1ResourceClaimTemplateListForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1ResourceSliceRequest {
  name: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta1ResourceSliceListRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

/**
 *
 */
export class ResourceV1beta1Api extends runtime.BaseAPI {
  /**
   * create a DeviceClass
   */
  async createResourceV1beta1DeviceClassRaw(
    requestParameters: CreateResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1DeviceClass>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta1DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/deviceclasses`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1DeviceClassToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * create a DeviceClass
   */
  async createResourceV1beta1DeviceClass(
    requestParameters: CreateResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1DeviceClass> {
    const response = await this.createResourceV1beta1DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * create a ResourceClaim
   */
  async createResourceV1beta1NamespacedResourceClaimRaw(
    requestParameters: CreateResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling createResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta1NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1ResourceClaimToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * create a ResourceClaim
   */
  async createResourceV1beta1NamespacedResourceClaim(
    requestParameters: CreateResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.createResourceV1beta1NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * create a ResourceClaimTemplate
   */
  async createResourceV1beta1NamespacedResourceClaimTemplateRaw(
    requestParameters: CreateResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimTemplate>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling createResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1ResourceClaimTemplateToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * create a ResourceClaimTemplate
   */
  async createResourceV1beta1NamespacedResourceClaimTemplate(
    requestParameters: CreateResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimTemplate> {
    const response = await this.createResourceV1beta1NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * create a ResourceSlice
   */
  async createResourceV1beta1ResourceSliceRaw(
    requestParameters: CreateResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceSlice>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta1ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceslices`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1ResourceSliceToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * create a ResourceSlice
   */
  async createResourceV1beta1ResourceSlice(
    requestParameters: CreateResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceSlice> {
    const response = await this.createResourceV1beta1ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of DeviceClass
   */
  async deleteResourceV1beta1CollectionDeviceClassRaw(
    requestParameters: DeleteResourceV1beta1CollectionDeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/deviceclasses`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of DeviceClass
   */
  async deleteResourceV1beta1CollectionDeviceClass(
    requestParameters: DeleteResourceV1beta1CollectionDeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta1CollectionDeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of ResourceClaim
   */
  async deleteResourceV1beta1CollectionNamespacedResourceClaimRaw(
    requestParameters: DeleteResourceV1beta1CollectionNamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta1CollectionNamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of ResourceClaim
   */
  async deleteResourceV1beta1CollectionNamespacedResourceClaim(
    requestParameters: DeleteResourceV1beta1CollectionNamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta1CollectionNamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of ResourceClaimTemplate
   */
  async deleteResourceV1beta1CollectionNamespacedResourceClaimTemplateRaw(
    requestParameters: DeleteResourceV1beta1CollectionNamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta1CollectionNamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of ResourceClaimTemplate
   */
  async deleteResourceV1beta1CollectionNamespacedResourceClaimTemplate(
    requestParameters: DeleteResourceV1beta1CollectionNamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta1CollectionNamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of ResourceSlice
   */
  async deleteResourceV1beta1CollectionResourceSliceRaw(
    requestParameters: DeleteResourceV1beta1CollectionResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceslices`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of ResourceSlice
   */
  async deleteResourceV1beta1CollectionResourceSlice(
    requestParameters: DeleteResourceV1beta1CollectionResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta1CollectionResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a DeviceClass
   */
  async deleteResourceV1beta1DeviceClassRaw(
    requestParameters: DeleteResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta1DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * delete a DeviceClass
   */
  async deleteResourceV1beta1DeviceClass(
    requestParameters: DeleteResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1DeviceClass> {
    const response = await this.deleteResourceV1beta1DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a ResourceClaim
   */
  async deleteResourceV1beta1NamespacedResourceClaimRaw(
    requestParameters: DeleteResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta1NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * delete a ResourceClaim
   */
  async deleteResourceV1beta1NamespacedResourceClaim(
    requestParameters: DeleteResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.deleteResourceV1beta1NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a ResourceClaimTemplate
   */
  async deleteResourceV1beta1NamespacedResourceClaimTemplateRaw(
    requestParameters: DeleteResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * delete a ResourceClaimTemplate
   */
  async deleteResourceV1beta1NamespacedResourceClaimTemplate(
    requestParameters: DeleteResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimTemplate> {
    const response = await this.deleteResourceV1beta1NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a ResourceSlice
   */
  async deleteResourceV1beta1ResourceSliceRaw(
    requestParameters: DeleteResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta1ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * delete a ResourceSlice
   */
  async deleteResourceV1beta1ResourceSlice(
    requestParameters: DeleteResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceSlice> {
    const response = await this.deleteResourceV1beta1ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * get available resources
   */
  async getResourceV1beta1APIResourcesRaw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue),
    );
  }

  /**
   * get available resources
   */
  async getResourceV1beta1APIResources(
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
    const response = await this.getResourceV1beta1APIResourcesRaw(initOverrides);
    return await response.value();
  }

  /**
   * list or watch objects of kind DeviceClass
   */
  async listResourceV1beta1DeviceClassRaw(
    requestParameters: ListResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1DeviceClassList>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/deviceclasses`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1DeviceClassListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind DeviceClass
   */
  async listResourceV1beta1DeviceClass(
    requestParameters: ListResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1DeviceClassList> {
    const response = await this.listResourceV1beta1DeviceClassRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta1NamespacedResourceClaimRaw(
    requestParameters: ListResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimList>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling listResourceV1beta1NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta1NamespacedResourceClaim(
    requestParameters: ListResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimList> {
    const response = await this.listResourceV1beta1NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta1NamespacedResourceClaimTemplateRaw(
    requestParameters: ListResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimTemplateList>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling listResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimTemplateListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta1NamespacedResourceClaimTemplate(
    requestParameters: ListResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimTemplateList> {
    const response = await this.listResourceV1beta1NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta1ResourceClaimForAllNamespacesRaw(
    requestParameters: ListResourceV1beta1ResourceClaimForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimList>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceclaims`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta1ResourceClaimForAllNamespaces(
    requestParameters: ListResourceV1beta1ResourceClaimForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimList> {
    const response = await this.listResourceV1beta1ResourceClaimForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta1ResourceClaimTemplateForAllNamespacesRaw(
    requestParameters: ListResourceV1beta1ResourceClaimTemplateForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimTemplateList>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceclaimtemplates`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimTemplateListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta1ResourceClaimTemplateForAllNamespaces(
    requestParameters: ListResourceV1beta1ResourceClaimTemplateForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimTemplateList> {
    const response = await this.listResourceV1beta1ResourceClaimTemplateForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceSlice
   */
  async listResourceV1beta1ResourceSliceRaw(
    requestParameters: ListResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceSliceList>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceslices`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceSliceListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceSlice
   */
  async listResourceV1beta1ResourceSlice(
    requestParameters: ListResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceSliceList> {
    const response = await this.listResourceV1beta1ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified DeviceClass
   */
  async patchResourceV1beta1DeviceClassRaw(
    requestParameters: PatchResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta1DeviceClass.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta1DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified DeviceClass
   */
  async patchResourceV1beta1DeviceClass(
    requestParameters: PatchResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1DeviceClass> {
    const response = await this.patchResourceV1beta1DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified ResourceClaim
   */
  async patchResourceV1beta1NamespacedResourceClaimRaw(
    requestParameters: PatchResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta1NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified ResourceClaim
   */
  async patchResourceV1beta1NamespacedResourceClaim(
    requestParameters: PatchResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.patchResourceV1beta1NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update status of the specified ResourceClaim
   */
  async patchResourceV1beta1NamespacedResourceClaimStatusRaw(
    requestParameters: PatchResourceV1beta1NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * partially update status of the specified ResourceClaim
   */
  async patchResourceV1beta1NamespacedResourceClaimStatus(
    requestParameters: PatchResourceV1beta1NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.patchResourceV1beta1NamespacedResourceClaimStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified ResourceClaimTemplate
   */
  async patchResourceV1beta1NamespacedResourceClaimTemplateRaw(
    requestParameters: PatchResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified ResourceClaimTemplate
   */
  async patchResourceV1beta1NamespacedResourceClaimTemplate(
    requestParameters: PatchResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimTemplate> {
    const response = await this.patchResourceV1beta1NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified ResourceSlice
   */
  async patchResourceV1beta1ResourceSliceRaw(
    requestParameters: PatchResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta1ResourceSlice.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta1ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified ResourceSlice
   */
  async patchResourceV1beta1ResourceSlice(
    requestParameters: PatchResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceSlice> {
    const response = await this.patchResourceV1beta1ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified DeviceClass
   */
  async readResourceV1beta1DeviceClassRaw(
    requestParameters: ReadResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta1DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * read the specified DeviceClass
   */
  async readResourceV1beta1DeviceClass(
    requestParameters: ReadResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1DeviceClass> {
    const response = await this.readResourceV1beta1DeviceClassRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * read the specified ResourceClaim
   */
  async readResourceV1beta1NamespacedResourceClaimRaw(
    requestParameters: ReadResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readResourceV1beta1NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * read the specified ResourceClaim
   */
  async readResourceV1beta1NamespacedResourceClaim(
    requestParameters: ReadResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.readResourceV1beta1NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read status of the specified ResourceClaim
   */
  async readResourceV1beta1NamespacedResourceClaimStatusRaw(
    requestParameters: ReadResourceV1beta1NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * read status of the specified ResourceClaim
   */
  async readResourceV1beta1NamespacedResourceClaimStatus(
    requestParameters: ReadResourceV1beta1NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.readResourceV1beta1NamespacedResourceClaimStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified ResourceClaimTemplate
   */
  async readResourceV1beta1NamespacedResourceClaimTemplateRaw(
    requestParameters: ReadResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * read the specified ResourceClaimTemplate
   */
  async readResourceV1beta1NamespacedResourceClaimTemplate(
    requestParameters: ReadResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimTemplate> {
    const response = await this.readResourceV1beta1NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified ResourceSlice
   */
  async readResourceV1beta1ResourceSliceRaw(
    requestParameters: ReadResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta1ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * read the specified ResourceSlice
   */
  async readResourceV1beta1ResourceSlice(
    requestParameters: ReadResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceSlice> {
    const response = await this.readResourceV1beta1ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified DeviceClass
   */
  async replaceResourceV1beta1DeviceClassRaw(
    requestParameters: ReplaceResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta1DeviceClass.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta1DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1DeviceClassToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified DeviceClass
   */
  async replaceResourceV1beta1DeviceClass(
    requestParameters: ReplaceResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1DeviceClass> {
    const response = await this.replaceResourceV1beta1DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified ResourceClaim
   */
  async replaceResourceV1beta1NamespacedResourceClaimRaw(
    requestParameters: ReplaceResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1ResourceClaimToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified ResourceClaim
   */
  async replaceResourceV1beta1NamespacedResourceClaim(
    requestParameters: ReplaceResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.replaceResourceV1beta1NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace status of the specified ResourceClaim
   */
  async replaceResourceV1beta1NamespacedResourceClaimStatusRaw(
    requestParameters: ReplaceResourceV1beta1NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaimStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaims/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1ResourceClaimToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * replace status of the specified ResourceClaim
   */
  async replaceResourceV1beta1NamespacedResourceClaimStatus(
    requestParameters: ReplaceResourceV1beta1NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaim> {
    const response = await this.replaceResourceV1beta1NamespacedResourceClaimStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified ResourceClaimTemplate
   */
  async replaceResourceV1beta1NamespacedResourceClaimTemplateRaw(
    requestParameters: ReplaceResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1ResourceClaimTemplateToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified ResourceClaimTemplate
   */
  async replaceResourceV1beta1NamespacedResourceClaimTemplate(
    requestParameters: ReplaceResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceClaimTemplate> {
    const response = await this.replaceResourceV1beta1NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified ResourceSlice
   */
  async replaceResourceV1beta1ResourceSliceRaw(
    requestParameters: ReplaceResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta1ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta1ResourceSlice.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta1ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta1ResourceSliceToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta1ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified ResourceSlice
   */
  async replaceResourceV1beta1ResourceSlice(
    requestParameters: ReplaceResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta1ResourceSlice> {
    const response = await this.replaceResourceV1beta1ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1DeviceClassRaw(
    requestParameters: WatchResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta1DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1DeviceClass(
    requestParameters: WatchResourceV1beta1DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1DeviceClassListRaw(
    requestParameters: WatchResourceV1beta1DeviceClassListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/deviceclasses`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1DeviceClassList(
    requestParameters: WatchResourceV1beta1DeviceClassListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1DeviceClassListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1NamespacedResourceClaimRaw(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta1NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta1NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1NamespacedResourceClaim(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1NamespacedResourceClaimListRaw(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta1NamespacedResourceClaimList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1NamespacedResourceClaimList(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1NamespacedResourceClaimListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1NamespacedResourceClaimTemplateRaw(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta1NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1NamespacedResourceClaimTemplate(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1NamespacedResourceClaimTemplateListRaw(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimTemplateListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta1NamespacedResourceClaimTemplateList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1NamespacedResourceClaimTemplateList(
    requestParameters: WatchResourceV1beta1NamespacedResourceClaimTemplateListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1NamespacedResourceClaimTemplateListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1ResourceClaimListForAllNamespacesRaw(
    requestParameters: WatchResourceV1beta1ResourceClaimListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/resourceclaims`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1ResourceClaimListForAllNamespaces(
    requestParameters: WatchResourceV1beta1ResourceClaimListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1ResourceClaimListForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1ResourceClaimTemplateListForAllNamespacesRaw(
    requestParameters: WatchResourceV1beta1ResourceClaimTemplateListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/resourceclaimtemplates`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1ResourceClaimTemplateListForAllNamespaces(
    requestParameters: WatchResourceV1beta1ResourceClaimTemplateListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1ResourceClaimTemplateListForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1ResourceSliceRaw(
    requestParameters: WatchResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta1ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta1ResourceSlice(
    requestParameters: WatchResourceV1beta1ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1ResourceSliceListRaw(
    requestParameters: WatchResourceV1beta1ResourceSliceListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta1/watch/resourceslices`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta1ResourceSliceList(
    requestParameters: WatchResourceV1beta1ResourceSliceListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta1ResourceSliceListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
