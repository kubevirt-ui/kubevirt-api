/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NMStateSpecAffinity,
    NMStateSpecAffinityFromJSON,
    NMStateSpecAffinityFromJSONTyped,
    NMStateSpecAffinityToJSON,
    NMStateSpecInfraAffinity,
    NMStateSpecInfraAffinityFromJSON,
    NMStateSpecInfraAffinityFromJSONTyped,
    NMStateSpecInfraAffinityToJSON,
    NMStateSpecInfraTolerations,
    NMStateSpecInfraTolerationsFromJSON,
    NMStateSpecInfraTolerationsFromJSONTyped,
    NMStateSpecInfraTolerationsToJSON,
    NMStateSpecSelfSignConfiguration,
    NMStateSpecSelfSignConfigurationFromJSON,
    NMStateSpecSelfSignConfigurationFromJSONTyped,
    NMStateSpecSelfSignConfigurationToJSON,
} from './';

/**
 * NMStateSpec defines the desired state of NMState
 * @export
 * @interface NMStateSpec
 */
export interface NMStateSpec {
    /**
     * 
     * @type {NMStateSpecAffinity}
     * @memberof NMStateSpec
     */
    affinity?: NMStateSpecAffinity;
    /**
     * 
     * @type {NMStateSpecInfraAffinity}
     * @memberof NMStateSpec
     */
    infraAffinity?: NMStateSpecInfraAffinity;
    /**
     * InfraNodeSelector is an optional selector that will be added to webhook & certmanager Deployment manifests If InfraNodeSelector is specified, the webhook and certmanager will run only on nodes that have each of the indicated key-value pairs as labels applied to the node.
     * @type {{ [key: string]: string; }}
     * @memberof NMStateSpec
     */
    infraNodeSelector?: { [key: string]: string; };
    /**
     * InfraTolerations is an optional list of tolerations to be added to webhook & certmanager Deployment manifests If InfraTolerations is specified, the webhook and certmanager will be able to be scheduled on nodes with corresponding taints
     * @type {Array<NMStateSpecInfraTolerations>}
     * @memberof NMStateSpec
     */
    infraTolerations?: Array<NMStateSpecInfraTolerations>;
    /**
     * NodeSelector is an optional selector that will be added to handler DaemonSet manifest for both workers and control-plane (https://github.com/nmstate/kubernetes-nmstate/blob/main/deploy/handler/operator.yaml). If NodeSelector is specified, the handler will run only on nodes that have each of the indicated key-value pairs as labels applied to the node.
     * @type {{ [key: string]: string; }}
     * @memberof NMStateSpec
     */
    nodeSelector?: { [key: string]: string; };
    /**
     * 
     * @type {NMStateSpecSelfSignConfiguration}
     * @memberof NMStateSpec
     */
    selfSignConfiguration?: NMStateSpecSelfSignConfiguration;
    /**
     * Tolerations is an optional list of tolerations to be added to handler DaemonSet manifest If Tolerations is specified, the handler daemonset will be also scheduled on nodes with corresponding taints
     * @type {Array<NMStateSpecInfraTolerations>}
     * @memberof NMStateSpec
     */
    tolerations?: Array<NMStateSpecInfraTolerations>;
}

export function NMStateSpecFromJSON(json: any): NMStateSpec {
    return NMStateSpecFromJSONTyped(json, false);
}

export function NMStateSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): NMStateSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'affinity': !exists(json, 'affinity') ? undefined : NMStateSpecAffinityFromJSON(json['affinity']),
        'infraAffinity': !exists(json, 'infraAffinity') ? undefined : NMStateSpecInfraAffinityFromJSON(json['infraAffinity']),
        'infraNodeSelector': !exists(json, 'infraNodeSelector') ? undefined : json['infraNodeSelector'],
        'infraTolerations': !exists(json, 'infraTolerations') ? undefined : ((json['infraTolerations'] as Array<any>).map(NMStateSpecInfraTolerationsFromJSON)),
        'nodeSelector': !exists(json, 'nodeSelector') ? undefined : json['nodeSelector'],
        'selfSignConfiguration': !exists(json, 'selfSignConfiguration') ? undefined : NMStateSpecSelfSignConfigurationFromJSON(json['selfSignConfiguration']),
        'tolerations': !exists(json, 'tolerations') ? undefined : ((json['tolerations'] as Array<any>).map(NMStateSpecInfraTolerationsFromJSON)),
    };
}

export function NMStateSpecToJSON(value?: NMStateSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'affinity': NMStateSpecAffinityToJSON(value.affinity),
        'infraAffinity': NMStateSpecInfraAffinityToJSON(value.infraAffinity),
        'infraNodeSelector': value.infraNodeSelector,
        'infraTolerations': value.infraTolerations === undefined ? undefined : ((value.infraTolerations as Array<any>).map(NMStateSpecInfraTolerationsToJSON)),
        'nodeSelector': value.nodeSelector,
        'selfSignConfiguration': NMStateSpecSelfSignConfigurationToJSON(value.selfSignConfiguration),
        'tolerations': value.tolerations === undefined ? undefined : ((value.tolerations as Array<any>).map(NMStateSpecInfraTolerationsToJSON)),
    };
}

