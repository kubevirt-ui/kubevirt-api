/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions,
    NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSON,
    NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSONTyped,
    NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsToJSON,
} from './';

/**
 * A label query over a set of resources, in this case pods.
 * @export
 * @interface NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector
 */
export interface NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector {
    /**
     * matchExpressions is a list of label selector requirements. The requirements are ANDed.
     * @type {Array<NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions>}
     * @memberof NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector
     */
    matchExpressions?: Array<NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions>;
    /**
     * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     * @type {{ [key: string]: string; }}
     * @memberof NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector
     */
    matchLabels?: { [key: string]: string; };
}

export function NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorFromJSON(json: any): NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector {
    return NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorFromJSONTyped(json, false);
}

export function NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorFromJSONTyped(json: any, ignoreDiscriminator: boolean): NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'matchExpressions': !exists(json, 'matchExpressions') ? undefined : ((json['matchExpressions'] as Array<any>).map(NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSON)),
        'matchLabels': !exists(json, 'matchLabels') ? undefined : json['matchLabels'],
    };
}

export function NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorToJSON(value?: NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'matchExpressions': value.matchExpressions === undefined ? undefined : ((value.matchExpressions as Array<any>).map(NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsToJSON)),
        'matchLabels': value.matchLabels,
    };
}

