/* tslint:disable */
/* eslint-disable */
/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  V1NMStateSpecAffinity,
  V1NMStateSpecAffinityFromJSON,
  V1NMStateSpecAffinityFromJSONTyped,
  V1NMStateSpecAffinityToJSON,
  V1NMStateSpecInfraAffinity,
  V1NMStateSpecInfraAffinityFromJSON,
  V1NMStateSpecInfraAffinityFromJSONTyped,
  V1NMStateSpecInfraAffinityToJSON,
  V1NMStateSpecInfraTolerations,
  V1NMStateSpecInfraTolerationsFromJSON,
  V1NMStateSpecInfraTolerationsFromJSONTyped,
  V1NMStateSpecInfraTolerationsToJSON,
  V1NMStateSpecSelfSignConfiguration,
  V1NMStateSpecSelfSignConfigurationFromJSON,
  V1NMStateSpecSelfSignConfigurationFromJSONTyped,
  V1NMStateSpecSelfSignConfigurationToJSON,
} from './';

/**
 * V1NMStateSpec defines the desired state of V1NMState
 * @export
 * @interface V1NMStateSpec
 */
export interface V1NMStateSpec {
  /**
   *
   * @type {V1NMStateSpecAffinity}
   * @memberof V1NMStateSpec
   */
  affinity?: V1NMStateSpecAffinity;
  /**
   *
   * @type {V1NMStateSpecInfraAffinity}
   * @memberof V1NMStateSpec
   */
  infraAffinity?: V1NMStateSpecInfraAffinity;
  /**
   * InfraNodeSelector is an optional selector that will be added to webhook & certmanager Deployment manifests If InfraNodeSelector is specified, the webhook and certmanager will run only on nodes that have each of the indicated key-value pairs as labels applied to the node.
   * @type {{ [key: string]: string; }}
   * @memberof V1NMStateSpec
   */
  infraNodeSelector?: { [key: string]: string };
  /**
   * InfraTolerations is an optional list of tolerations to be added to webhook & certmanager Deployment manifests If InfraTolerations is specified, the webhook and certmanager will be able to be scheduled on nodes with corresponding taints
   * @type {Array<V1NMStateSpecInfraTolerations>}
   * @memberof V1NMStateSpec
   */
  infraTolerations?: Array<V1NMStateSpecInfraTolerations>;
  /**
   * NodeSelector is an optional selector that will be added to handler DaemonSet manifest for both workers and control-plane (https://github.com/V1NMState/kubernetes-V1NMState/blob/main/deploy/handler/operator.yaml). If NodeSelector is specified, the handler will run only on nodes that have each of the indicated key-value pairs as labels applied to the node.
   * @type {{ [key: string]: string; }}
   * @memberof V1NMStateSpec
   */
  nodeSelector?: { [key: string]: string };
  /**
   *
   * @type {V1NMStateSpecSelfSignConfiguration}
   * @memberof V1NMStateSpec
   */
  selfSignConfiguration?: V1NMStateSpecSelfSignConfiguration;
  /**
   * Tolerations is an optional list of tolerations to be added to handler DaemonSet manifest If Tolerations is specified, the handler daemonset will be also scheduled on nodes with corresponding taints
   * @type {Array<V1NMStateSpecInfraTolerations>}
   * @memberof V1NMStateSpec
   */
  tolerations?: Array<V1NMStateSpecInfraTolerations>;
}

export function V1NMStateSpecFromJSON(json: any): V1NMStateSpec {
  return V1NMStateSpecFromJSONTyped(json, false);
}

export function V1NMStateSpecFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1NMStateSpec {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    affinity: !exists(json, 'affinity')
      ? undefined
      : V1NMStateSpecAffinityFromJSON(json['affinity']),
    infraAffinity: !exists(json, 'infraAffinity')
      ? undefined
      : V1NMStateSpecInfraAffinityFromJSON(json['infraAffinity']),
    infraNodeSelector: !exists(json, 'infraNodeSelector') ? undefined : json['infraNodeSelector'],
    infraTolerations: !exists(json, 'infraTolerations')
      ? undefined
      : (json['infraTolerations'] as Array<any>).map(V1NMStateSpecInfraTolerationsFromJSON),
    nodeSelector: !exists(json, 'nodeSelector') ? undefined : json['nodeSelector'],
    selfSignConfiguration: !exists(json, 'selfSignConfiguration')
      ? undefined
      : V1NMStateSpecSelfSignConfigurationFromJSON(json['selfSignConfiguration']),
    tolerations: !exists(json, 'tolerations')
      ? undefined
      : (json['tolerations'] as Array<any>).map(V1NMStateSpecInfraTolerationsFromJSON),
  };
}

export function V1NMStateSpecToJSON(value?: V1NMStateSpec | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    affinity: V1NMStateSpecAffinityToJSON(value.affinity),
    infraAffinity: V1NMStateSpecInfraAffinityToJSON(value.infraAffinity),
    infraNodeSelector: value.infraNodeSelector,
    infraTolerations:
      value.infraTolerations === undefined
        ? undefined
        : (value.infraTolerations as Array<any>).map(V1NMStateSpecInfraTolerationsToJSON),
    nodeSelector: value.nodeSelector,
    selfSignConfiguration: V1NMStateSpecSelfSignConfigurationToJSON(value.selfSignConfiguration),
    tolerations:
      value.tolerations === undefined
        ? undefined
        : (value.tolerations as Array<any>).map(V1NMStateSpecInfraTolerationsToJSON),
  };
}
