/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NodeNetworkConfigurationPolicyStatusConditions,
    NodeNetworkConfigurationPolicyStatusConditionsFromJSON,
    NodeNetworkConfigurationPolicyStatusConditionsFromJSONTyped,
    NodeNetworkConfigurationPolicyStatusConditionsToJSON,
} from './';

/**
 * NodeNetworkStateStatus is the status of the NodeNetworkState of a specific node
 * @export
 * @interface NodeNetworkStateStatus
 */
export interface NodeNetworkStateStatus {
    /**
     * 
     * @type {Array<NodeNetworkConfigurationPolicyStatusConditions>}
     * @memberof NodeNetworkStateStatus
     */
    conditions?: Array<NodeNetworkConfigurationPolicyStatusConditions>;
    /**
     * State contains the namestatectl yaml [1] as string instead of golang struct so we don't need to be in sync with the schema. 
     *  [1] https://github.com/nmstate/nmstate/blob/base/libnmstate/schemas/operational-state.yaml
     * @type {object}
     * @memberof NodeNetworkStateStatus
     */
    currentState?: object;
    /**
     * 
     * @type {string}
     * @memberof NodeNetworkStateStatus
     */
    handlerNetworkManagerVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeNetworkStateStatus
     */
    handlerNmstateVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeNetworkStateStatus
     */
    hostNetworkManagerVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeNetworkStateStatus
     */
    lastSuccessfulUpdateTime?: string;
}

export function NodeNetworkStateStatusFromJSON(json: any): NodeNetworkStateStatus {
    return NodeNetworkStateStatusFromJSONTyped(json, false);
}

export function NodeNetworkStateStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeNetworkStateStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(NodeNetworkConfigurationPolicyStatusConditionsFromJSON)),
        'currentState': !exists(json, 'currentState') ? undefined : json['currentState'],
        'handlerNetworkManagerVersion': !exists(json, 'handlerNetworkManagerVersion') ? undefined : json['handlerNetworkManagerVersion'],
        'handlerNmstateVersion': !exists(json, 'handlerNmstateVersion') ? undefined : json['handlerNmstateVersion'],
        'hostNetworkManagerVersion': !exists(json, 'hostNetworkManagerVersion') ? undefined : json['hostNetworkManagerVersion'],
        'lastSuccessfulUpdateTime': !exists(json, 'lastSuccessfulUpdateTime') ? undefined : (new Date(json['lastSuccessfulUpdateTime'])),
    };
}

export function NodeNetworkStateStatusToJSON(value?: NodeNetworkStateStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(NodeNetworkConfigurationPolicyStatusConditionsToJSON)),
        'currentState': value.currentState,
        'handlerNetworkManagerVersion': value.handlerNetworkManagerVersion,
        'handlerNmstateVersion': value.handlerNmstateVersion,
        'hostNetworkManagerVersion': value.hostNetworkManagerVersion,
        'lastSuccessfulUpdateTime': value.lastSuccessfulUpdateTime === undefined ? undefined : (value.lastSuccessfulUpdateTime.toISOString()),
    };
}

