/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  IoK8sApiResourceV1alpha3DeviceSelector,
  IoK8sApiResourceV1alpha3DeviceSelectorFromJSON,
  IoK8sApiResourceV1alpha3DeviceSelectorToJSON,
} from './';

/**
 * DeviceTaintSelector defines which device(s) a DeviceTaintRule applies to. The empty selector matches all devices. Without a selector, no devices are matched.
 * @export
 * @interface IoK8sApiResourceV1alpha3DeviceTaintSelector
 */
export interface IoK8sApiResourceV1alpha3DeviceTaintSelector {
  /**
   * If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
   *
   * Setting also driver and pool may be required to avoid ambiguity, but is not required.
   * @type {string}
   * @memberof IoK8sApiResourceV1alpha3DeviceTaintSelector
   */
  device?: string;
  /**
   * If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
   * @type {string}
   * @memberof IoK8sApiResourceV1alpha3DeviceTaintSelector
   */
  deviceClassName?: string;
  /**
   * If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
   * @type {string}
   * @memberof IoK8sApiResourceV1alpha3DeviceTaintSelector
   */
  driver?: string;
  /**
   * If pool is set, only devices in that pool are selected.
   *
   * Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
   * @type {string}
   * @memberof IoK8sApiResourceV1alpha3DeviceTaintSelector
   */
  pool?: string;
  /**
   * Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
   * @type {Array<IoK8sApiResourceV1alpha3DeviceSelector>}
   * @memberof IoK8sApiResourceV1alpha3DeviceTaintSelector
   */
  selectors?: Array<IoK8sApiResourceV1alpha3DeviceSelector>;
}

export function IoK8sApiResourceV1alpha3DeviceTaintSelectorFromJSON(
  json: any,
): IoK8sApiResourceV1alpha3DeviceTaintSelector {
  return IoK8sApiResourceV1alpha3DeviceTaintSelectorFromJSONTyped(json, false);
}

export function IoK8sApiResourceV1alpha3DeviceTaintSelectorFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): IoK8sApiResourceV1alpha3DeviceTaintSelector {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    device: !exists(json, 'device') ? undefined : json['device'],
    deviceClassName: !exists(json, 'deviceClassName') ? undefined : json['deviceClassName'],
    driver: !exists(json, 'driver') ? undefined : json['driver'],
    pool: !exists(json, 'pool') ? undefined : json['pool'],
    selectors: !exists(json, 'selectors')
      ? undefined
      : (json['selectors'] as Array<any>).map(IoK8sApiResourceV1alpha3DeviceSelectorFromJSON),
  };
}

export function IoK8sApiResourceV1alpha3DeviceTaintSelectorToJSON(
  value?: IoK8sApiResourceV1alpha3DeviceTaintSelector | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    device: value.device,
    deviceClassName: value.deviceClassName,
    driver: value.driver,
    pool: value.pool,
    selectors:
      value.selectors === undefined
        ? undefined
        : (value.selectors as Array<any>).map(IoK8sApiResourceV1alpha3DeviceSelectorToJSON),
  };
}
