/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1Condition,
    V1ConditionFromJSON,
    V1ConditionFromJSONTyped,
    V1ConditionToJSON,
} from './';

/**
 * CDIStatus defines the status of the installation
 * @export
 * @interface V1beta1CDIStatus
 */
export interface V1beta1CDIStatus {
    /**
     * A list of current conditions of the resource
     * @type {Array<V1Condition>}
     * @memberof V1beta1CDIStatus
     */
    conditions?: Array<V1Condition>;
    /**
     * The observed version of the resource
     * @type {string}
     * @memberof V1beta1CDIStatus
     */
    observedVersion?: string;
    /**
     * The version of the resource as defined by the operator
     * @type {string}
     * @memberof V1beta1CDIStatus
     */
    operatorVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof V1beta1CDIStatus
     */
    phase?: string;
    /**
     * The desired version of the resource
     * @type {string}
     * @memberof V1beta1CDIStatus
     */
    targetVersion?: string;
}

export function V1beta1CDIStatusFromJSON(json: any): V1beta1CDIStatus {
    return V1beta1CDIStatusFromJSONTyped(json, false);
}

export function V1beta1CDIStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1CDIStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(V1ConditionFromJSON)),
        'observedVersion': !exists(json, 'observedVersion') ? undefined : json['observedVersion'],
        'operatorVersion': !exists(json, 'operatorVersion') ? undefined : json['operatorVersion'],
        'phase': !exists(json, 'phase') ? undefined : json['phase'],
        'targetVersion': !exists(json, 'targetVersion') ? undefined : json['targetVersion'],
    };
}

export function V1beta1CDIStatusToJSON(value?: V1beta1CDIStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(V1ConditionToJSON)),
        'observedVersion': value.observedVersion,
        'operatorVersion': value.operatorVersion,
        'phase': value.phase,
        'targetVersion': value.targetVersion,
    };
}

