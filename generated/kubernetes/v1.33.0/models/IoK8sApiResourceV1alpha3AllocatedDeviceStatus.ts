/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IoK8sApiResourceV1alpha3NetworkDeviceData,
    IoK8sApiResourceV1alpha3NetworkDeviceDataFromJSON,
    IoK8sApiResourceV1alpha3NetworkDeviceDataFromJSONTyped,
    IoK8sApiResourceV1alpha3NetworkDeviceDataToJSON,
    IoK8sApimachineryPkgApisMetaV1Condition,
    IoK8sApimachineryPkgApisMetaV1ConditionFromJSON,
    IoK8sApimachineryPkgApisMetaV1ConditionFromJSONTyped,
    IoK8sApimachineryPkgApisMetaV1ConditionToJSON,
} from './';

/**
 * AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.
 * @export
 * @interface IoK8sApiResourceV1alpha3AllocatedDeviceStatus
 */
export interface IoK8sApiResourceV1alpha3AllocatedDeviceStatus {
    /**
     * Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.
     * 
     * Must not contain more than 8 entries.
     * @type {Array<IoK8sApimachineryPkgApisMetaV1Condition>}
     * @memberof IoK8sApiResourceV1alpha3AllocatedDeviceStatus
     */
    conditions?: Array<IoK8sApimachineryPkgApisMetaV1Condition>;
    /**
     * RawExtension is used to hold extensions in external versions.
     * 
     * To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
     * 
     * // Internal package:
     * 
     * 	type MyAPIObject struct {
     * 		runtime.TypeMeta `json:",inline"`
     * 		MyPlugin runtime.Object `json:"myPlugin"`
     * 	}
     * 
     * 	type PluginA struct {
     * 		AOption string `json:"aOption"`
     * 	}
     * 
     * // External package:
     * 
     * 	type MyAPIObject struct {
     * 		runtime.TypeMeta `json:",inline"`
     * 		MyPlugin runtime.RawExtension `json:"myPlugin"`
     * 	}
     * 
     * 	type PluginA struct {
     * 		AOption string `json:"aOption"`
     * 	}
     * 
     * // On the wire, the JSON will look something like this:
     * 
     * 	{
     * 		"kind":"MyAPIObject",
     * 		"apiVersion":"v1",
     * 		"myPlugin": {
     * 			"kind":"PluginA",
     * 			"aOption":"foo",
     * 		},
     * 	}
     * 
     * So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
     * @type {object}
     * @memberof IoK8sApiResourceV1alpha3AllocatedDeviceStatus
     */
    data?: object;
    /**
     * Device references one device instance via its name in the driver's resource pool. It must be a DNS label.
     * @type {string}
     * @memberof IoK8sApiResourceV1alpha3AllocatedDeviceStatus
     */
    device: string;
    /**
     * Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.
     * 
     * Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver.
     * @type {string}
     * @memberof IoK8sApiResourceV1alpha3AllocatedDeviceStatus
     */
    driver: string;
    /**
     * 
     * @type {IoK8sApiResourceV1alpha3NetworkDeviceData}
     * @memberof IoK8sApiResourceV1alpha3AllocatedDeviceStatus
     */
    networkData?: IoK8sApiResourceV1alpha3NetworkDeviceData;
    /**
     * This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).
     * 
     * Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes.
     * @type {string}
     * @memberof IoK8sApiResourceV1alpha3AllocatedDeviceStatus
     */
    pool: string;
}

export function IoK8sApiResourceV1alpha3AllocatedDeviceStatusFromJSON(json: any): IoK8sApiResourceV1alpha3AllocatedDeviceStatus {
    return IoK8sApiResourceV1alpha3AllocatedDeviceStatusFromJSONTyped(json, false);
}

export function IoK8sApiResourceV1alpha3AllocatedDeviceStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiResourceV1alpha3AllocatedDeviceStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(IoK8sApimachineryPkgApisMetaV1ConditionFromJSON)),
        'data': !exists(json, 'data') ? undefined : json['data'],
        'device': json['device'],
        'driver': json['driver'],
        'networkData': !exists(json, 'networkData') ? undefined : IoK8sApiResourceV1alpha3NetworkDeviceDataFromJSON(json['networkData']),
        'pool': json['pool'],
    };
}

export function IoK8sApiResourceV1alpha3AllocatedDeviceStatusToJSON(value?: IoK8sApiResourceV1alpha3AllocatedDeviceStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(IoK8sApimachineryPkgApisMetaV1ConditionToJSON)),
        'data': value.data,
        'device': value.device,
        'driver': value.driver,
        'networkData': IoK8sApiResourceV1alpha3NetworkDeviceDataToJSON(value.networkData),
        'pool': value.pool,
    };
}

