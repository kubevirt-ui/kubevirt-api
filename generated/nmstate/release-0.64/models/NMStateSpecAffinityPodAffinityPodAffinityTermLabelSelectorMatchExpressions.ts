/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 * @export
 * @interface NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions
 */
export interface NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions {
    /**
     * key is the label key that the selector applies to.
     * @type {string}
     * @memberof NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions
     */
    key: string;
    /**
     * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
     * @type {string}
     * @memberof NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions
     */
    operator: string;
    /**
     * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
     * @type {Array<string>}
     * @memberof NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions
     */
    values?: Array<string>;
}

export function NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSON(json: any): NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions {
    return NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSONTyped(json, false);
}

export function NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': json['key'],
        'operator': json['operator'],
        'values': !exists(json, 'values') ? undefined : json['values'],
    };
}

export function NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsToJSON(value?: NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': value.key,
        'operator': value.operator,
        'values': value.values,
    };
}

