/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Selects a key from a ConfigMap.
 * @export
 * @interface IoK8sApiCoreV1ConfigMapKeySelector
 */
export interface IoK8sApiCoreV1ConfigMapKeySelector {
    /**
     * The key to select.
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapKeySelector
     */
    key: string;
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapKeySelector
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ConfigMapKeySelector
     */
    optional?: boolean;
}

export function IoK8sApiCoreV1ConfigMapKeySelectorFromJSON(json: any): IoK8sApiCoreV1ConfigMapKeySelector {
    return IoK8sApiCoreV1ConfigMapKeySelectorFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1ConfigMapKeySelectorFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1ConfigMapKeySelector {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': json['key'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'optional': !exists(json, 'optional') ? undefined : json['optional'],
    };
}

export function IoK8sApiCoreV1ConfigMapKeySelectorToJSON(value?: IoK8sApiCoreV1ConfigMapKeySelector | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': value.key,
        'name': value.name,
        'optional': value.optional,
    };
}

