/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingFromJSON,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingList,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingListFromJSON,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingToJSON,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyFromJSON,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyList,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyListFromJSON,
  IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyToJSON,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
  IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
} from '../models';

export interface CreateAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest {
  body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface CreateAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest {
  body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface DeleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyRequest {
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyBindingRequest {
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest {
  name: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest {
  name: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface PatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest {
  name: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest {
  name: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface ReadAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest {
  name: string;
  pretty?: string;
}

export interface ReadAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest {
  name: string;
  pretty?: string;
}

export interface ReplaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest {
  name: string;
  body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest {
  name: string;
  body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest {
  name: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest {
  name: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingListRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyListRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

/**
 *
 */
export class AdmissionregistrationV1alpha1Api extends runtime.BaseAPI {
  /**
   * create a MutatingAdmissionPolicy
   */
  async createAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
    requestParameters: CreateAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicies`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyToJSON(
          requestParameters.body,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyFromJSON(jsonValue),
    );
  }

  /**
   * create a MutatingAdmissionPolicy
   */
  async createAdmissionregistrationV1alpha1MutatingAdmissionPolicy(
    requestParameters: CreateAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy> {
    const response = await this.createAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * create a MutatingAdmissionPolicyBinding
   */
  async createAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
    requestParameters: CreateAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<
    runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding>
  > {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicybindings`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingToJSON(
          requestParameters.body,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingFromJSON(jsonValue),
    );
  }

  /**
   * create a MutatingAdmissionPolicyBinding
   */
  async createAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding(
    requestParameters: CreateAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding> {
    const response =
      await this.createAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * delete collection of MutatingAdmissionPolicy
   */
  async deleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyRaw(
    requestParameters: DeleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicies`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of MutatingAdmissionPolicy
   */
  async deleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicy(
    requestParameters: DeleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response =
      await this.deleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * delete collection of MutatingAdmissionPolicyBinding
   */
  async deleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyBindingRaw(
    requestParameters: DeleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicybindings`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of MutatingAdmissionPolicyBinding
   */
  async deleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyBinding(
    requestParameters: DeleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response =
      await this.deleteAdmissionregistrationV1alpha1CollectionMutatingAdmissionPolicyBindingRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * delete a MutatingAdmissionPolicy
   */
  async deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
    requestParameters: DeleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicies/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete a MutatingAdmissionPolicy
   */
  async deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicy(
    requestParameters: DeleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a MutatingAdmissionPolicyBinding
   */
  async deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
    requestParameters: DeleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicybindings/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete a MutatingAdmissionPolicyBinding
   */
  async deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding(
    requestParameters: DeleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response =
      await this.deleteAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * get available resources
   */
  async getAdmissionregistrationV1alpha1APIResourcesRaw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue),
    );
  }

  /**
   * get available resources
   */
  async getAdmissionregistrationV1alpha1APIResources(
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
    const response = await this.getAdmissionregistrationV1alpha1APIResourcesRaw(initOverrides);
    return await response.value();
  }

  /**
   * list or watch objects of kind MutatingAdmissionPolicy
   */
  async listAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
    requestParameters: ListAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<
    runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyList>
  > {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicies`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind MutatingAdmissionPolicy
   */
  async listAdmissionregistrationV1alpha1MutatingAdmissionPolicy(
    requestParameters: ListAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyList> {
    const response = await this.listAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind MutatingAdmissionPolicyBinding
   */
  async listAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
    requestParameters: ListAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<
    runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingList>
  > {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicybindings`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind MutatingAdmissionPolicyBinding
   */
  async listAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding(
    requestParameters: ListAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingList> {
    const response = await this.listAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified MutatingAdmissionPolicy
   */
  async patchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
    requestParameters: PatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicies/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified MutatingAdmissionPolicy
   */
  async patchAdmissionregistrationV1alpha1MutatingAdmissionPolicy(
    requestParameters: PatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy> {
    const response = await this.patchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified MutatingAdmissionPolicyBinding
   */
  async patchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
    requestParameters: PatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<
    runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding>
  > {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicybindings/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified MutatingAdmissionPolicyBinding
   */
  async patchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding(
    requestParameters: PatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding> {
    const response = await this.patchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified MutatingAdmissionPolicy
   */
  async readAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
    requestParameters: ReadAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicies/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyFromJSON(jsonValue),
    );
  }

  /**
   * read the specified MutatingAdmissionPolicy
   */
  async readAdmissionregistrationV1alpha1MutatingAdmissionPolicy(
    requestParameters: ReadAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy> {
    const response = await this.readAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified MutatingAdmissionPolicyBinding
   */
  async readAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
    requestParameters: ReadAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<
    runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding>
  > {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicybindings/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingFromJSON(jsonValue),
    );
  }

  /**
   * read the specified MutatingAdmissionPolicyBinding
   */
  async readAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding(
    requestParameters: ReadAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding> {
    const response = await this.readAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified MutatingAdmissionPolicy
   */
  async replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
    requestParameters: ReplaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicies/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyToJSON(
          requestParameters.body,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified MutatingAdmissionPolicy
   */
  async replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicy(
    requestParameters: ReplaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicy> {
    const response = await this.replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified MutatingAdmissionPolicyBinding
   */
  async replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
    requestParameters: ReplaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<
    runtime.ApiResponse<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding>
  > {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/mutatingadmissionpolicybindings/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingToJSON(
          requestParameters.body,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified MutatingAdmissionPolicyBinding
   */
  async replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding(
    requestParameters: ReplaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding> {
    const response =
      await this.replaceAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * watch changes to an object of kind MutatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchAdmissionregistrationV1alpha1MutatingAdmissionPolicy.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/watch/mutatingadmissionpolicies/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind MutatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicy(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind MutatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/watch/mutatingadmissionpolicybindings/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind MutatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBinding(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of MutatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingListRaw(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/watch/mutatingadmissionpolicybindings`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of MutatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingList(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response =
      await this.watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyBindingListRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * watch individual changes to a list of MutatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyListRaw(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/admissionregistration.k8s.io/v1alpha1/watch/mutatingadmissionpolicies`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of MutatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyList(
    requestParameters: WatchAdmissionregistrationV1alpha1MutatingAdmissionPolicyListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchAdmissionregistrationV1alpha1MutatingAdmissionPolicyListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
