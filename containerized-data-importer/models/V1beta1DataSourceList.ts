/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  V1ListMeta,
  V1ListMetaFromJSON,
  V1ListMetaToJSON,
  V1beta1DataSource,
  V1beta1DataSourceFromJSON,
  V1beta1DataSourceToJSON,
} from './';

/**
 * DataSourceList provides the needed parameters to do request a list of Data Sources from the system
 * @export
 * @interface V1beta1DataSourceList
 */
export interface V1beta1DataSourceList {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   * @type {string}
   * @memberof V1beta1DataSourceList
   */
  apiVersion?: string;
  /**
   * Items provides a list of DataSources
   * @type {Array<V1beta1DataSource>}
   * @memberof V1beta1DataSourceList
   */
  items: Array<V1beta1DataSource>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   * @type {string}
   * @memberof V1beta1DataSourceList
   */
  kind?: string;
  /**
   *
   * @type {V1ListMeta}
   * @memberof V1beta1DataSourceList
   */
  metadata: V1ListMeta;
}

export function V1beta1DataSourceListFromJSON(json: any): V1beta1DataSourceList {
  return V1beta1DataSourceListFromJSONTyped(json, false);
}

export function V1beta1DataSourceListFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1beta1DataSourceList {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    apiVersion: !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
    items: (json['items'] as Array<any>).map(V1beta1DataSourceFromJSON),
    kind: !exists(json, 'kind') ? undefined : json['kind'],
    metadata: V1ListMetaFromJSON(json['metadata']),
  };
}

export function V1beta1DataSourceListToJSON(value?: V1beta1DataSourceList | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    apiVersion: value.apiVersion,
    items: (value.items as Array<any>).map(V1beta1DataSourceToJSON),
    kind: value.kind,
    metadata: V1ListMetaToJSON(value.metadata),
  };
}
