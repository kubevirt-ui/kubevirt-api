/* tslint:disable */
/* eslint-disable */
/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 * @export
 * @interface V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions
 */
export interface V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions {
  /**
   * The label key that the selector applies to.
   * @type {string}
   * @memberof V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions
   */
  key: string;
  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   * @type {string}
   * @memberof V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions
   */
  operator: string;
  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   * @type {Array<string>}
   * @memberof V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions
   */
  values?: Array<string>;
}

export function V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsFromJSON(
  json: any,
): V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions {
  return V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsFromJSONTyped(json, false);
}

export function V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    key: json['key'],
    operator: json['operator'],
    values: !exists(json, 'values') ? undefined : json['values'],
  };
}

export function V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsToJSON(
  value?: V1NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    key: value.key,
    operator: value.operator,
    values: value.values,
  };
}
