/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    K8sIoApiCoreV1NodeSelectorRequirement,
    K8sIoApiCoreV1NodeSelectorRequirementFromJSON,
    K8sIoApiCoreV1NodeSelectorRequirementFromJSONTyped,
    K8sIoApiCoreV1NodeSelectorRequirementToJSON,
} from './';

/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 * @export
 * @interface K8sIoApiCoreV1NodeSelectorTerm
 */
export interface K8sIoApiCoreV1NodeSelectorTerm {
    /**
     * A list of node selector requirements by node's labels.
     * @type {Array<K8sIoApiCoreV1NodeSelectorRequirement>}
     * @memberof K8sIoApiCoreV1NodeSelectorTerm
     */
    matchExpressions?: Array<K8sIoApiCoreV1NodeSelectorRequirement>;
    /**
     * A list of node selector requirements by node's fields.
     * @type {Array<K8sIoApiCoreV1NodeSelectorRequirement>}
     * @memberof K8sIoApiCoreV1NodeSelectorTerm
     */
    matchFields?: Array<K8sIoApiCoreV1NodeSelectorRequirement>;
}

export function K8sIoApiCoreV1NodeSelectorTermFromJSON(json: any): K8sIoApiCoreV1NodeSelectorTerm {
    return K8sIoApiCoreV1NodeSelectorTermFromJSONTyped(json, false);
}

export function K8sIoApiCoreV1NodeSelectorTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): K8sIoApiCoreV1NodeSelectorTerm {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'matchExpressions': !exists(json, 'matchExpressions') ? undefined : ((json['matchExpressions'] as Array<any>).map(K8sIoApiCoreV1NodeSelectorRequirementFromJSON)),
        'matchFields': !exists(json, 'matchFields') ? undefined : ((json['matchFields'] as Array<any>).map(K8sIoApiCoreV1NodeSelectorRequirementFromJSON)),
    };
}

export function K8sIoApiCoreV1NodeSelectorTermToJSON(value?: K8sIoApiCoreV1NodeSelectorTerm | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'matchExpressions': value.matchExpressions === undefined ? undefined : ((value.matchExpressions as Array<any>).map(K8sIoApiCoreV1NodeSelectorRequirementToJSON)),
        'matchFields': value.matchFields === undefined ? undefined : ((value.matchFields as Array<any>).map(K8sIoApiCoreV1NodeSelectorRequirementToJSON)),
    };
}

