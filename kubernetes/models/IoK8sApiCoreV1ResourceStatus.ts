/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  IoK8sApiCoreV1ResourceHealth,
  IoK8sApiCoreV1ResourceHealthFromJSON,
  IoK8sApiCoreV1ResourceHealthToJSON,
} from './';

/**
 * ResourceStatus represents the status of a single resource allocated to a Pod.
 * @export
 * @interface IoK8sApiCoreV1ResourceStatus
 */
export interface IoK8sApiCoreV1ResourceStatus {
  /**
   * Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be "claim:<claim_name>/<request>". When this status is reported about a container, the "claim_name" and "request" must match one of the claims of this container.
   * @type {string}
   * @memberof IoK8sApiCoreV1ResourceStatus
   */
  name: string;
  /**
   * List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
   * @type {Array<IoK8sApiCoreV1ResourceHealth>}
   * @memberof IoK8sApiCoreV1ResourceStatus
   */
  resources?: Array<IoK8sApiCoreV1ResourceHealth>;
}

export function IoK8sApiCoreV1ResourceStatusFromJSON(json: any): IoK8sApiCoreV1ResourceStatus {
  return IoK8sApiCoreV1ResourceStatusFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1ResourceStatusFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): IoK8sApiCoreV1ResourceStatus {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    resources: !exists(json, 'resources')
      ? undefined
      : (json['resources'] as Array<any>).map(IoK8sApiCoreV1ResourceHealthFromJSON),
  };
}

export function IoK8sApiCoreV1ResourceStatusToJSON(
  value?: IoK8sApiCoreV1ResourceStatus | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    resources:
      value.resources === undefined
        ? undefined
        : (value.resources as Array<any>).map(IoK8sApiCoreV1ResourceHealthToJSON),
  };
}
