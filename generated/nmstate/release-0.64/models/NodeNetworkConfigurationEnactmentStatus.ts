/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NodeNetworkConfigurationEnactmentStatusCapturedStates,
    NodeNetworkConfigurationEnactmentStatusCapturedStatesFromJSON,
    NodeNetworkConfigurationEnactmentStatusCapturedStatesFromJSONTyped,
    NodeNetworkConfigurationEnactmentStatusCapturedStatesToJSON,
    NodeNetworkConfigurationEnactmentStatusMetaInfo,
    NodeNetworkConfigurationEnactmentStatusMetaInfoFromJSON,
    NodeNetworkConfigurationEnactmentStatusMetaInfoFromJSONTyped,
    NodeNetworkConfigurationEnactmentStatusMetaInfoToJSON,
    NodeNetworkConfigurationPolicyStatusConditions,
    NodeNetworkConfigurationPolicyStatusConditionsFromJSON,
    NodeNetworkConfigurationPolicyStatusConditionsFromJSONTyped,
    NodeNetworkConfigurationPolicyStatusConditionsToJSON,
} from './';

/**
 * NodeNetworkConfigurationEnactmentStatus defines the observed state of NodeNetworkConfigurationEnactment
 * @export
 * @interface NodeNetworkConfigurationEnactmentStatus
 */
export interface NodeNetworkConfigurationEnactmentStatus {
    /**
     * A cache containing the resolved captures after processing the capture at NNCP
     * @type {{ [key: string]: NodeNetworkConfigurationEnactmentStatusCapturedStates; }}
     * @memberof NodeNetworkConfigurationEnactmentStatus
     */
    capturedStates?: { [key: string]: NodeNetworkConfigurationEnactmentStatusCapturedStates; };
    /**
     * 
     * @type {Array<NodeNetworkConfigurationPolicyStatusConditions>}
     * @memberof NodeNetworkConfigurationEnactmentStatus
     */
    conditions?: Array<NodeNetworkConfigurationPolicyStatusConditions>;
    /**
     * The desired state rendered for the enactment's node using the policy desiredState as template
     * @type {object}
     * @memberof NodeNetworkConfigurationEnactmentStatus
     */
    desiredState?: object;
    /**
     * 
     * @type {NodeNetworkConfigurationEnactmentStatusMetaInfo}
     * @memberof NodeNetworkConfigurationEnactmentStatus
     */
    desiredStateMetaInfo?: NodeNetworkConfigurationEnactmentStatusMetaInfo;
    /**
     * The generation from policy needed to check if an enactment condition status belongs to the same policy version
     * @type {number}
     * @memberof NodeNetworkConfigurationEnactmentStatus
     */
    policyGeneration?: number;
}

export function NodeNetworkConfigurationEnactmentStatusFromJSON(json: any): NodeNetworkConfigurationEnactmentStatus {
    return NodeNetworkConfigurationEnactmentStatusFromJSONTyped(json, false);
}

export function NodeNetworkConfigurationEnactmentStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeNetworkConfigurationEnactmentStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'capturedStates': !exists(json, 'capturedStates') ? undefined : (mapValues(json['capturedStates'], NodeNetworkConfigurationEnactmentStatusCapturedStatesFromJSON)),
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(NodeNetworkConfigurationPolicyStatusConditionsFromJSON)),
        'desiredState': !exists(json, 'desiredState') ? undefined : json['desiredState'],
        'desiredStateMetaInfo': !exists(json, 'desiredStateMetaInfo') ? undefined : NodeNetworkConfigurationEnactmentStatusMetaInfoFromJSON(json['desiredStateMetaInfo']),
        'policyGeneration': !exists(json, 'policyGeneration') ? undefined : json['policyGeneration'],
    };
}

export function NodeNetworkConfigurationEnactmentStatusToJSON(value?: NodeNetworkConfigurationEnactmentStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'capturedStates': value.capturedStates === undefined ? undefined : (mapValues(value.capturedStates, NodeNetworkConfigurationEnactmentStatusCapturedStatesToJSON)),
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(NodeNetworkConfigurationPolicyStatusConditionsToJSON)),
        'desiredState': value.desiredState,
        'desiredStateMetaInfo': NodeNetworkConfigurationEnactmentStatusMetaInfoToJSON(value.desiredStateMetaInfo),
        'policyGeneration': value.policyGeneration,
    };
}

