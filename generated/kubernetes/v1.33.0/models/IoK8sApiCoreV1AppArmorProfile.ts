/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * AppArmorProfile defines a pod or container's AppArmor settings.
 * @export
 * @interface IoK8sApiCoreV1AppArmorProfile
 */
export interface IoK8sApiCoreV1AppArmorProfile {
    /**
     * localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
     * @type {string}
     * @memberof IoK8sApiCoreV1AppArmorProfile
     */
    localhostProfile?: string;
    /**
     * type indicates which kind of AppArmor profile will be applied. Valid options are:
     *   Localhost - a profile pre-loaded on the node.
     *   RuntimeDefault - the container runtime's default profile.
     *   Unconfined - no AppArmor enforcement.
     * @type {string}
     * @memberof IoK8sApiCoreV1AppArmorProfile
     */
    type: string;
}

export function IoK8sApiCoreV1AppArmorProfileFromJSON(json: any): IoK8sApiCoreV1AppArmorProfile {
    return IoK8sApiCoreV1AppArmorProfileFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1AppArmorProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1AppArmorProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'localhostProfile': !exists(json, 'localhostProfile') ? undefined : json['localhostProfile'],
        'type': json['type'],
    };
}

export function IoK8sApiCoreV1AppArmorProfileToJSON(value?: IoK8sApiCoreV1AppArmorProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'localhostProfile': value.localhostProfile,
        'type': value.type,
    };
}

