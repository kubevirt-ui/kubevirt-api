/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
 * 
 * DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
 * @export
 * @interface IoK8sApiCoreV1GitRepoVolumeSource
 */
export interface IoK8sApiCoreV1GitRepoVolumeSource {
    /**
     * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     * @type {string}
     * @memberof IoK8sApiCoreV1GitRepoVolumeSource
     */
    directory?: string;
    /**
     * repository is the URL
     * @type {string}
     * @memberof IoK8sApiCoreV1GitRepoVolumeSource
     */
    repository: string;
    /**
     * revision is the commit hash for the specified revision.
     * @type {string}
     * @memberof IoK8sApiCoreV1GitRepoVolumeSource
     */
    revision?: string;
}

export function IoK8sApiCoreV1GitRepoVolumeSourceFromJSON(json: any): IoK8sApiCoreV1GitRepoVolumeSource {
    return IoK8sApiCoreV1GitRepoVolumeSourceFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1GitRepoVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1GitRepoVolumeSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'directory': !exists(json, 'directory') ? undefined : json['directory'],
        'repository': json['repository'],
        'revision': !exists(json, 'revision') ? undefined : json['revision'],
    };
}

export function IoK8sApiCoreV1GitRepoVolumeSourceToJSON(value?: IoK8sApiCoreV1GitRepoVolumeSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'directory': value.directory,
        'repository': value.repository,
        'revision': value.revision,
    };
}

