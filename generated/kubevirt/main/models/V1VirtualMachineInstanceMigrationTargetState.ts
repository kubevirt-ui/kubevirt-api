/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V1VirtualMachineInstanceMigrationTargetState
 */
export interface V1VirtualMachineInstanceMigrationTargetState {
    /**
     * The UID of the target attachment pod for hotplug volumes
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    attachmentPodUID?: string;
    /**
     * If the VMI requires dedicated CPUs, this field will hold the dedicated CPU set on the target node
     * @type {Array<number>}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    cpuSet?: Array<number>;
    /**
     * The list of ports opened for live migration on the destination node
     * @type {{ [key: string]: number; }}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    directMigrationNodePorts?: { [key: string]: number; };
    /**
     * The Target Node has seen the Domain Start Event
     * @type {boolean}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    domainDetected?: boolean;
    /**
     * The name of the domain on the source libvirt domain
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    domainName?: string;
    /**
     * Namespace used in the name of the source libvirt domain. Can be used to find and modify paths in the domain
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    domainNamespace?: string;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    domainReadyTimestamp?: string;
    /**
     * The Source VirtualMachineInstanceMigration object associated with this migration
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    migrationUID?: string;
    /**
     * The source node that the VMI originated on
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    node?: string;
    /**
     * The address of the target node to use for the migration
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    nodeAddress?: string;
    /**
     * If the VMI requires dedicated CPUs, this field will hold the numa topology on the target node
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    nodeTopology?: string;
    /**
     * If the VMI being migrated uses persistent features (backend-storage), its source PVC name is saved here
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    persistentStatePVCName?: string;
    /**
     * The source pod that the VMI is originated on
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    pod?: string;
    /**
     * SELinuxContext is the actual SELinux context of the pod
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    selinuxContext?: string;
    /**
     * The ip address/fqdn:port combination to use to synchronize the VMI with the target.
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    syncAddress?: string;
    /**
     * VirtualMachineInstanceUID is the UID of the target virtual machine instance
     * @type {string}
     * @memberof V1VirtualMachineInstanceMigrationTargetState
     */
    virtualMachineInstanceUID?: string;
}

export function V1VirtualMachineInstanceMigrationTargetStateFromJSON(json: any): V1VirtualMachineInstanceMigrationTargetState {
    return V1VirtualMachineInstanceMigrationTargetStateFromJSONTyped(json, false);
}

export function V1VirtualMachineInstanceMigrationTargetStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1VirtualMachineInstanceMigrationTargetState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attachmentPodUID': !exists(json, 'attachmentPodUID') ? undefined : json['attachmentPodUID'],
        'cpuSet': !exists(json, 'cpuSet') ? undefined : json['cpuSet'],
        'directMigrationNodePorts': !exists(json, 'directMigrationNodePorts') ? undefined : json['directMigrationNodePorts'],
        'domainDetected': !exists(json, 'domainDetected') ? undefined : json['domainDetected'],
        'domainName': !exists(json, 'domainName') ? undefined : json['domainName'],
        'domainNamespace': !exists(json, 'domainNamespace') ? undefined : json['domainNamespace'],
        'domainReadyTimestamp': !exists(json, 'domainReadyTimestamp') ? undefined : (new Date(json['domainReadyTimestamp'])),
        'migrationUID': !exists(json, 'migrationUID') ? undefined : json['migrationUID'],
        'node': !exists(json, 'node') ? undefined : json['node'],
        'nodeAddress': !exists(json, 'nodeAddress') ? undefined : json['nodeAddress'],
        'nodeTopology': !exists(json, 'nodeTopology') ? undefined : json['nodeTopology'],
        'persistentStatePVCName': !exists(json, 'persistentStatePVCName') ? undefined : json['persistentStatePVCName'],
        'pod': !exists(json, 'pod') ? undefined : json['pod'],
        'selinuxContext': !exists(json, 'selinuxContext') ? undefined : json['selinuxContext'],
        'syncAddress': !exists(json, 'syncAddress') ? undefined : json['syncAddress'],
        'virtualMachineInstanceUID': !exists(json, 'virtualMachineInstanceUID') ? undefined : json['virtualMachineInstanceUID'],
    };
}

export function V1VirtualMachineInstanceMigrationTargetStateToJSON(value?: V1VirtualMachineInstanceMigrationTargetState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attachmentPodUID': value.attachmentPodUID,
        'cpuSet': value.cpuSet,
        'directMigrationNodePorts': value.directMigrationNodePorts,
        'domainDetected': value.domainDetected,
        'domainName': value.domainName,
        'domainNamespace': value.domainNamespace,
        'domainReadyTimestamp': value.domainReadyTimestamp === undefined ? undefined : (value.domainReadyTimestamp.toISOString()),
        'migrationUID': value.migrationUID,
        'node': value.node,
        'nodeAddress': value.nodeAddress,
        'nodeTopology': value.nodeTopology,
        'persistentStatePVCName': value.persistentStatePVCName,
        'pod': value.pod,
        'selinuxContext': value.selinuxContext,
        'syncAddress': value.syncAddress,
        'virtualMachineInstanceUID': value.virtualMachineInstanceUID,
    };
}

