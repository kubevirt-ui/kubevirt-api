/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
 * @export
 * @interface IoK8sApiCertificatesV1CertificateSigningRequestCondition
 */
export interface IoK8sApiCertificatesV1CertificateSigningRequestCondition {
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof IoK8sApiCertificatesV1CertificateSigningRequestCondition
     */
    lastTransitionTime?: string;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof IoK8sApiCertificatesV1CertificateSigningRequestCondition
     */
    lastUpdateTime?: string;
    /**
     * message contains a human readable message with details about the request state
     * @type {string}
     * @memberof IoK8sApiCertificatesV1CertificateSigningRequestCondition
     */
    message?: string;
    /**
     * reason indicates a brief reason for the request state
     * @type {string}
     * @memberof IoK8sApiCertificatesV1CertificateSigningRequestCondition
     */
    reason?: string;
    /**
     * status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
     * @type {string}
     * @memberof IoK8sApiCertificatesV1CertificateSigningRequestCondition
     */
    status: string;
    /**
     * type of the condition. Known conditions are "Approved", "Denied", and "Failed".
     * 
     * An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
     * 
     * A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
     * 
     * A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
     * 
     * Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
     * 
     * Only one condition of a given type is allowed.
     * @type {string}
     * @memberof IoK8sApiCertificatesV1CertificateSigningRequestCondition
     */
    type: string;
}

export function IoK8sApiCertificatesV1CertificateSigningRequestConditionFromJSON(json: any): IoK8sApiCertificatesV1CertificateSigningRequestCondition {
    return IoK8sApiCertificatesV1CertificateSigningRequestConditionFromJSONTyped(json, false);
}

export function IoK8sApiCertificatesV1CertificateSigningRequestConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCertificatesV1CertificateSigningRequestCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'lastTransitionTime': !exists(json, 'lastTransitionTime') ? undefined : (new Date(json['lastTransitionTime'])),
        'lastUpdateTime': !exists(json, 'lastUpdateTime') ? undefined : (new Date(json['lastUpdateTime'])),
        'message': !exists(json, 'message') ? undefined : json['message'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'status': json['status'],
        'type': json['type'],
    };
}

export function IoK8sApiCertificatesV1CertificateSigningRequestConditionToJSON(value?: IoK8sApiCertificatesV1CertificateSigningRequestCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'lastTransitionTime': value.lastTransitionTime === undefined ? undefined : (value.lastTransitionTime.toISOString()),
        'lastUpdateTime': value.lastUpdateTime === undefined ? undefined : (value.lastUpdateTime.toISOString()),
        'message': value.message,
        'reason': value.reason,
        'status': value.status,
        'type': value.type,
    };
}

