/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1NodeMediatedDeviceTypesConfig,
    V1NodeMediatedDeviceTypesConfigFromJSON,
    V1NodeMediatedDeviceTypesConfigFromJSONTyped,
    V1NodeMediatedDeviceTypesConfigToJSON,
} from './';

/**
 * MediatedDevicesConfiguration holds information about MDEV types to be defined, if available
 * @export
 * @interface V1MediatedDevicesConfiguration
 */
export interface V1MediatedDevicesConfiguration {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1MediatedDevicesConfiguration
     */
    mediatedDeviceTypes?: Array<string>;
    /**
     * Deprecated. Use mediatedDeviceTypes instead.
     * @type {Array<string>}
     * @memberof V1MediatedDevicesConfiguration
     */
    mediatedDevicesTypes?: Array<string>;
    /**
     * 
     * @type {Array<V1NodeMediatedDeviceTypesConfig>}
     * @memberof V1MediatedDevicesConfiguration
     */
    nodeMediatedDeviceTypes?: Array<V1NodeMediatedDeviceTypesConfig>;
}

export function V1MediatedDevicesConfigurationFromJSON(json: any): V1MediatedDevicesConfiguration {
    return V1MediatedDevicesConfigurationFromJSONTyped(json, false);
}

export function V1MediatedDevicesConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1MediatedDevicesConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mediatedDeviceTypes': !exists(json, 'mediatedDeviceTypes') ? undefined : json['mediatedDeviceTypes'],
        'mediatedDevicesTypes': !exists(json, 'mediatedDevicesTypes') ? undefined : json['mediatedDevicesTypes'],
        'nodeMediatedDeviceTypes': !exists(json, 'nodeMediatedDeviceTypes') ? undefined : ((json['nodeMediatedDeviceTypes'] as Array<any>).map(V1NodeMediatedDeviceTypesConfigFromJSON)),
    };
}

export function V1MediatedDevicesConfigurationToJSON(value?: V1MediatedDevicesConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mediatedDeviceTypes': value.mediatedDeviceTypes,
        'mediatedDevicesTypes': value.mediatedDevicesTypes,
        'nodeMediatedDeviceTypes': value.nodeMediatedDeviceTypes === undefined ? undefined : ((value.nodeMediatedDeviceTypes as Array<any>).map(V1NodeMediatedDeviceTypesConfigToJSON)),
    };
}

