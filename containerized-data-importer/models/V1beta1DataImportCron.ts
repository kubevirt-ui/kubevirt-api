/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  V1ObjectMeta,
  V1ObjectMetaFromJSON,
  V1ObjectMetaToJSON,
  V1beta1DataImportCronSpec,
  V1beta1DataImportCronSpecFromJSON,
  V1beta1DataImportCronSpecToJSON,
  V1beta1DataImportCronStatus,
  V1beta1DataImportCronStatusFromJSON,
  V1beta1DataImportCronStatusToJSON,
} from './';

/**
 * DataImportCron defines a cron job for recurring polling/importing disk images as PVCs into a golden image namespace
 * @export
 * @interface V1beta1DataImportCron
 */
export interface V1beta1DataImportCron {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   * @type {string}
   * @memberof V1beta1DataImportCron
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   * @type {string}
   * @memberof V1beta1DataImportCron
   */
  kind?: string;
  /**
   *
   * @type {V1ObjectMeta}
   * @memberof V1beta1DataImportCron
   */
  metadata?: V1ObjectMeta;
  /**
   *
   * @type {V1beta1DataImportCronSpec}
   * @memberof V1beta1DataImportCron
   */
  spec: V1beta1DataImportCronSpec;
  /**
   *
   * @type {V1beta1DataImportCronStatus}
   * @memberof V1beta1DataImportCron
   */
  status?: V1beta1DataImportCronStatus;
}

export function V1beta1DataImportCronFromJSON(json: any): V1beta1DataImportCron {
  return V1beta1DataImportCronFromJSONTyped(json, false);
}

export function V1beta1DataImportCronFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1beta1DataImportCron {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    apiVersion: !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
    kind: !exists(json, 'kind') ? undefined : json['kind'],
    metadata: !exists(json, 'metadata') ? undefined : V1ObjectMetaFromJSON(json['metadata']),
    spec: V1beta1DataImportCronSpecFromJSON(json['spec']),
    status: !exists(json, 'status')
      ? undefined
      : V1beta1DataImportCronStatusFromJSON(json['status']),
  };
}

export function V1beta1DataImportCronToJSON(value?: V1beta1DataImportCron | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    apiVersion: value.apiVersion,
    kind: value.kind,
    metadata: V1ObjectMetaToJSON(value.metadata),
    spec: V1beta1DataImportCronSpecToJSON(value.spec),
    status: V1beta1DataImportCronStatusToJSON(value.status),
  };
}
