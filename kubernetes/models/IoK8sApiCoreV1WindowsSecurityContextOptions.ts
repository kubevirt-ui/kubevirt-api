/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * WindowsSecurityContextOptions contain Windows-specific options and credentials.
 * @export
 * @interface IoK8sApiCoreV1WindowsSecurityContextOptions
 */
export interface IoK8sApiCoreV1WindowsSecurityContextOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
     * @type {string}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     * @type {string}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
     * @type {boolean}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * @type {string}
     * @memberof IoK8sApiCoreV1WindowsSecurityContextOptions
     */
    runAsUserName?: string;
}

export function IoK8sApiCoreV1WindowsSecurityContextOptionsFromJSON(json: any): IoK8sApiCoreV1WindowsSecurityContextOptions {
    return IoK8sApiCoreV1WindowsSecurityContextOptionsFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1WindowsSecurityContextOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1WindowsSecurityContextOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gmsaCredentialSpec': !exists(json, 'gmsaCredentialSpec') ? undefined : json['gmsaCredentialSpec'],
        'gmsaCredentialSpecName': !exists(json, 'gmsaCredentialSpecName') ? undefined : json['gmsaCredentialSpecName'],
        'hostProcess': !exists(json, 'hostProcess') ? undefined : json['hostProcess'],
        'runAsUserName': !exists(json, 'runAsUserName') ? undefined : json['runAsUserName'],
    };
}

export function IoK8sApiCoreV1WindowsSecurityContextOptionsToJSON(value?: IoK8sApiCoreV1WindowsSecurityContextOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'gmsaCredentialSpec': value.gmsaCredentialSpec,
        'gmsaCredentialSpecName': value.gmsaCredentialSpecName,
        'hostProcess': value.hostProcess,
        'runAsUserName': value.runAsUserName,
    };
}

