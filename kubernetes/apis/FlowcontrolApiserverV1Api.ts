/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IoK8sApiFlowcontrolV1FlowSchema,
    IoK8sApiFlowcontrolV1FlowSchemaFromJSON,
    IoK8sApiFlowcontrolV1FlowSchemaToJSON,
    IoK8sApiFlowcontrolV1FlowSchemaList,
    IoK8sApiFlowcontrolV1FlowSchemaListFromJSON,
    IoK8sApiFlowcontrolV1FlowSchemaListToJSON,
    IoK8sApiFlowcontrolV1PriorityLevelConfiguration,
    IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON,
    IoK8sApiFlowcontrolV1PriorityLevelConfigurationToJSON,
    IoK8sApiFlowcontrolV1PriorityLevelConfigurationList,
    IoK8sApiFlowcontrolV1PriorityLevelConfigurationListFromJSON,
    IoK8sApiFlowcontrolV1PriorityLevelConfigurationListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateFlowcontrolApiserverV1FlowSchemaRequest {
    body: IoK8sApiFlowcontrolV1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CreateFlowcontrolApiserverV1PriorityLevelConfigurationRequest {
    body: IoK8sApiFlowcontrolV1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface DeleteFlowcontrolApiserverV1CollectionFlowSchemaRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteFlowcontrolApiserverV1CollectionPriorityLevelConfigurationRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteFlowcontrolApiserverV1FlowSchemaRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteFlowcontrolApiserverV1PriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListFlowcontrolApiserverV1FlowSchemaRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListFlowcontrolApiserverV1PriorityLevelConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchFlowcontrolApiserverV1FlowSchemaRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchFlowcontrolApiserverV1FlowSchemaStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchFlowcontrolApiserverV1PriorityLevelConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ReadFlowcontrolApiserverV1FlowSchemaRequest {
    name: string;
    pretty?: string;
}

export interface ReadFlowcontrolApiserverV1FlowSchemaStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadFlowcontrolApiserverV1PriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
}

export interface ReadFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceFlowcontrolApiserverV1FlowSchemaRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceFlowcontrolApiserverV1FlowSchemaStatusRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceFlowcontrolApiserverV1PriorityLevelConfigurationRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface WatchFlowcontrolApiserverV1FlowSchemaRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchFlowcontrolApiserverV1FlowSchemaListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchFlowcontrolApiserverV1PriorityLevelConfigurationRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchFlowcontrolApiserverV1PriorityLevelConfigurationListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class FlowcontrolApiserverV1Api extends runtime.BaseAPI {

    /**
     * create a FlowSchema
     */
    async createFlowcontrolApiserverV1FlowSchemaRaw(requestParameters: CreateFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchema>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createFlowcontrolApiserverV1FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1FlowSchemaToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * create a FlowSchema
     */
    async createFlowcontrolApiserverV1FlowSchema(requestParameters: CreateFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchema> {
        const response = await this.createFlowcontrolApiserverV1FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters: CreateFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfiguration>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1PriorityLevelConfigurationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createFlowcontrolApiserverV1PriorityLevelConfiguration(requestParameters: CreateFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfiguration> {
        const response = await this.createFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteFlowcontrolApiserverV1CollectionFlowSchemaRaw(requestParameters: DeleteFlowcontrolApiserverV1CollectionFlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteFlowcontrolApiserverV1CollectionFlowSchema(requestParameters: DeleteFlowcontrolApiserverV1CollectionFlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1CollectionFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1CollectionPriorityLevelConfigurationRaw(requestParameters: DeleteFlowcontrolApiserverV1CollectionPriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1CollectionPriorityLevelConfiguration(requestParameters: DeleteFlowcontrolApiserverV1CollectionPriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1CollectionPriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowcontrolApiserverV1FlowSchemaRaw(requestParameters: DeleteFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteFlowcontrolApiserverV1FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowcontrolApiserverV1FlowSchema(requestParameters: DeleteFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters: DeleteFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1PriorityLevelConfiguration(requestParameters: DeleteFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getFlowcontrolApiserverV1APIResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getFlowcontrolApiserverV1APIResources(initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getFlowcontrolApiserverV1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowcontrolApiserverV1FlowSchemaRaw(requestParameters: ListFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchemaList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowcontrolApiserverV1FlowSchema(requestParameters: ListFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchemaList> {
        const response = await this.listFlowcontrolApiserverV1FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters: ListFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfigurationList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listFlowcontrolApiserverV1PriorityLevelConfiguration(requestParameters: ListFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfigurationList> {
        const response = await this.listFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1FlowSchemaRaw(requestParameters: PatchFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1FlowSchema.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1FlowSchema(requestParameters: PatchFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchema> {
        const response = await this.patchFlowcontrolApiserverV1FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1FlowSchemaStatusRaw(requestParameters: PatchFlowcontrolApiserverV1FlowSchemaStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1FlowSchemaStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1FlowSchemaStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1FlowSchemaStatus(requestParameters: PatchFlowcontrolApiserverV1FlowSchemaStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchema> {
        const response = await this.patchFlowcontrolApiserverV1FlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters: PatchFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1PriorityLevelConfiguration(requestParameters: PatchFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfiguration> {
        const response = await this.patchFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1PriorityLevelConfigurationStatusRaw(requestParameters: PatchFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1PriorityLevelConfigurationStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1PriorityLevelConfigurationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1PriorityLevelConfigurationStatus(requestParameters: PatchFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfiguration> {
        const response = await this.patchFlowcontrolApiserverV1PriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowcontrolApiserverV1FlowSchemaRaw(requestParameters: ReadFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowcontrolApiserverV1FlowSchema(requestParameters: ReadFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchema> {
        const response = await this.readFlowcontrolApiserverV1FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowcontrolApiserverV1FlowSchemaStatusRaw(requestParameters: ReadFlowcontrolApiserverV1FlowSchemaStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1FlowSchemaStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowcontrolApiserverV1FlowSchemaStatus(requestParameters: ReadFlowcontrolApiserverV1FlowSchemaStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchema> {
        const response = await this.readFlowcontrolApiserverV1FlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters: ReadFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1PriorityLevelConfiguration(requestParameters: ReadFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfiguration> {
        const response = await this.readFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1PriorityLevelConfigurationStatusRaw(requestParameters: ReadFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1PriorityLevelConfigurationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1PriorityLevelConfigurationStatus(requestParameters: ReadFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfiguration> {
        const response = await this.readFlowcontrolApiserverV1PriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1FlowSchemaRaw(requestParameters: ReplaceFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1FlowSchema.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1FlowSchemaToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1FlowSchema(requestParameters: ReplaceFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchema> {
        const response = await this.replaceFlowcontrolApiserverV1FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1FlowSchemaStatusRaw(requestParameters: ReplaceFlowcontrolApiserverV1FlowSchemaStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1FlowSchemaStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1FlowSchemaStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1FlowSchemaToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1FlowSchemaStatus(requestParameters: ReplaceFlowcontrolApiserverV1FlowSchemaStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1FlowSchema> {
        const response = await this.replaceFlowcontrolApiserverV1FlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters: ReplaceFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1PriorityLevelConfigurationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1PriorityLevelConfiguration(requestParameters: ReplaceFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfiguration> {
        const response = await this.replaceFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1PriorityLevelConfigurationStatusRaw(requestParameters: ReplaceFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1PriorityLevelConfigurationStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1PriorityLevelConfigurationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1PriorityLevelConfigurationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1PriorityLevelConfigurationStatus(requestParameters: ReplaceFlowcontrolApiserverV1PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiFlowcontrolV1PriorityLevelConfiguration> {
        const response = await this.replaceFlowcontrolApiserverV1PriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1FlowSchemaRaw(requestParameters: WatchFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchFlowcontrolApiserverV1FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/watch/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1FlowSchema(requestParameters: WatchFlowcontrolApiserverV1FlowSchemaRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1FlowSchemaListRaw(requestParameters: WatchFlowcontrolApiserverV1FlowSchemaListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/watch/flowschemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1FlowSchemaList(requestParameters: WatchFlowcontrolApiserverV1FlowSchemaListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1FlowSchemaListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters: WatchFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchFlowcontrolApiserverV1PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/watch/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1PriorityLevelConfiguration(requestParameters: WatchFlowcontrolApiserverV1PriorityLevelConfigurationRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1PriorityLevelConfigurationListRaw(requestParameters: WatchFlowcontrolApiserverV1PriorityLevelConfigurationListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1/watch/prioritylevelconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1PriorityLevelConfigurationList(requestParameters: WatchFlowcontrolApiserverV1PriorityLevelConfigurationListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1PriorityLevelConfigurationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
