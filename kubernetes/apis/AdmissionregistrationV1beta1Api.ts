/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyToJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingFromJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingToJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingList,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListFromJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListToJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyList,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyListFromJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest {
    body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CreateAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest {
    body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface DeleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyBindingRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest {
    name: string;
    pretty?: string;
}

export interface ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest {
    name: string;
    pretty?: string;
}

export interface ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest {
    name: string;
    body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest {
    name: string;
    body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest {
    name: string;
    body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class AdmissionregistrationV1beta1Api extends runtime.BaseAPI {

    /**
     * create a ValidatingAdmissionPolicy
     */
    async createAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters: CreateAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * create a ValidatingAdmissionPolicy
     */
    async createAdmissionregistrationV1beta1ValidatingAdmissionPolicy(requestParameters: CreateAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy> {
        const response = await this.createAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a ValidatingAdmissionPolicyBinding
     */
    async createAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters: CreateAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * create a ValidatingAdmissionPolicyBinding
     */
    async createAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding(requestParameters: CreateAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.createAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ValidatingAdmissionPolicy
     */
    async deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyRaw(requestParameters: DeleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingAdmissionPolicy
     */
    async deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicy(requestParameters: DeleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of ValidatingAdmissionPolicyBinding
     */
    async deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyBindingRaw(requestParameters: DeleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingAdmissionPolicyBinding
     */
    async deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyBinding(requestParameters: DeleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ValidatingAdmissionPolicy
     */
    async deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters: DeleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingAdmissionPolicy
     */
    async deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicy(requestParameters: DeleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a ValidatingAdmissionPolicyBinding
     */
    async deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters: DeleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingAdmissionPolicyBinding
     */
    async deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding(requestParameters: DeleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAdmissionregistrationV1beta1APIResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAdmissionregistrationV1beta1APIResources(initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getAdmissionregistrationV1beta1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicy
     */
    async listAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters: ListAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicy
     */
    async listAdmissionregistrationV1beta1ValidatingAdmissionPolicy(requestParameters: ListAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyList> {
        const response = await this.listAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicyBinding
     */
    async listAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters: ListAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingAdmissionPolicyBinding
     */
    async listAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding(requestParameters: ListAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingList> {
        const response = await this.listAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingAdmissionPolicy
     */
    async patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters: PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingAdmissionPolicy
     */
    async patchAdmissionregistrationV1beta1ValidatingAdmissionPolicy(requestParameters: PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy> {
        const response = await this.patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingAdmissionPolicyBinding
     */
    async patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters: PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingAdmissionPolicyBinding
     */
    async patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding(requestParameters: PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified ValidatingAdmissionPolicy
     */
    async patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRaw(requestParameters: PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ValidatingAdmissionPolicy
     */
    async patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus(requestParameters: PatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy> {
        const response = await this.patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ValidatingAdmissionPolicy
     */
    async readAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters: ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingAdmissionPolicy
     */
    async readAdmissionregistrationV1beta1ValidatingAdmissionPolicy(requestParameters: ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy> {
        const response = await this.readAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified ValidatingAdmissionPolicyBinding
     */
    async readAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters: ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingAdmissionPolicyBinding
     */
    async readAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding(requestParameters: ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.readAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified ValidatingAdmissionPolicy
     */
    async readAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRaw(requestParameters: ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * read status of the specified ValidatingAdmissionPolicy
     */
    async readAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus(requestParameters: ReadAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy> {
        const response = await this.readAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ValidatingAdmissionPolicy
     */
    async replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingAdmissionPolicy
     */
    async replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicy(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy> {
        const response = await this.replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified ValidatingAdmissionPolicyBinding
     */
    async replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingAdmissionPolicyBinding
     */
    async replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding> {
        const response = await this.replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified ValidatingAdmissionPolicy
     */
    async replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRaw(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicyFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ValidatingAdmissionPolicy
     */
    async replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingAdmissionPolicy> {
        const response = await this.replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ValidatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAdmissionregistrationV1beta1ValidatingAdmissionPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/validatingadmissionpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ValidatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicy(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ValidatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/validatingadmissionpolicybindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ValidatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ValidatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListRaw(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/validatingadmissionpolicybindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ValidatingAdmissionPolicyBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingList(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBindingListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ValidatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyListRaw(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/validatingadmissionpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ValidatingAdmissionPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyList(requestParameters: WatchAdmissionregistrationV1beta1ValidatingAdmissionPolicyListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1ValidatingAdmissionPolicyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
