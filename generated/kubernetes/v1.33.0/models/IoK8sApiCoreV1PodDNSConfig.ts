/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IoK8sApiCoreV1PodDNSConfigOption,
    IoK8sApiCoreV1PodDNSConfigOptionFromJSON,
    IoK8sApiCoreV1PodDNSConfigOptionFromJSONTyped,
    IoK8sApiCoreV1PodDNSConfigOptionToJSON,
} from './';

/**
 * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
 * @export
 * @interface IoK8sApiCoreV1PodDNSConfig
 */
export interface IoK8sApiCoreV1PodDNSConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PodDNSConfig
     */
    nameservers?: Array<string>;
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     * @type {Array<IoK8sApiCoreV1PodDNSConfigOption>}
     * @memberof IoK8sApiCoreV1PodDNSConfig
     */
    options?: Array<IoK8sApiCoreV1PodDNSConfigOption>;
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PodDNSConfig
     */
    searches?: Array<string>;
}

export function IoK8sApiCoreV1PodDNSConfigFromJSON(json: any): IoK8sApiCoreV1PodDNSConfig {
    return IoK8sApiCoreV1PodDNSConfigFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1PodDNSConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1PodDNSConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nameservers': !exists(json, 'nameservers') ? undefined : json['nameservers'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(IoK8sApiCoreV1PodDNSConfigOptionFromJSON)),
        'searches': !exists(json, 'searches') ? undefined : json['searches'],
    };
}

export function IoK8sApiCoreV1PodDNSConfigToJSON(value?: IoK8sApiCoreV1PodDNSConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nameservers': value.nameservers,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(IoK8sApiCoreV1PodDNSConfigOptionToJSON)),
        'searches': value.searches,
    };
}

