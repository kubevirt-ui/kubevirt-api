/* tslint:disable */
/* eslint-disable */
/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStates,
  V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStatesFromJSON,
  V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStatesFromJSONTyped,
  V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStatesToJSON,
  V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfo,
  V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfoFromJSON,
  V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfoFromJSONTyped,
  V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfoToJSON,
  V1NodeNetworkConfigurationPolicyStatusConditions,
  V1NodeNetworkConfigurationPolicyStatusConditionsFromJSON,
  V1NodeNetworkConfigurationPolicyStatusConditionsFromJSONTyped,
  V1NodeNetworkConfigurationPolicyStatusConditionsToJSON,
} from './';

/**
 * V1beta1NodeNetworkConfigurationEnactmentStatus defines the observed state of V1beta1NodeNetworkConfigurationEnactment
 * @export
 * @interface V1beta1NodeNetworkConfigurationEnactmentStatus
 */
export interface V1beta1NodeNetworkConfigurationEnactmentStatus {
  /**
   * A cache containing the resolved captures after processing the capture at NNCP
   * @type {{ [key: string]: V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStates; }}
   * @memberof V1beta1NodeNetworkConfigurationEnactmentStatus
   */
  capturedStates?: { [key: string]: V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStates };
  /**
   *
   * @type {Array<V1NodeNetworkConfigurationPolicyStatusConditions>}
   * @memberof V1beta1NodeNetworkConfigurationEnactmentStatus
   */
  conditions?: Array<V1NodeNetworkConfigurationPolicyStatusConditions>;
  /**
   * The desired state rendered for the enactment's node using the policy desiredState as template
   * @type {object}
   * @memberof V1beta1NodeNetworkConfigurationEnactmentStatus
   */
  desiredState?: object;
  /**
   *
   * @type {V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfo}
   * @memberof V1beta1NodeNetworkConfigurationEnactmentStatus
   */
  desiredStateMetaInfo?: V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfo;
  /**
   * The generation from policy needed to check if an enactment condition status belongs to the same policy version
   * @type {number}
   * @memberof V1beta1NodeNetworkConfigurationEnactmentStatus
   */
  policyGeneration?: number;
}

export function V1beta1NodeNetworkConfigurationEnactmentStatusFromJSON(
  json: any,
): V1beta1NodeNetworkConfigurationEnactmentStatus {
  return V1beta1NodeNetworkConfigurationEnactmentStatusFromJSONTyped(json, false);
}

export function V1beta1NodeNetworkConfigurationEnactmentStatusFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1beta1NodeNetworkConfigurationEnactmentStatus {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    capturedStates: !exists(json, 'capturedStates')
      ? undefined
      : mapValues(
          json['capturedStates'],
          V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStatesFromJSON,
        ),
    conditions: !exists(json, 'conditions')
      ? undefined
      : (json['conditions'] as Array<any>).map(
          V1NodeNetworkConfigurationPolicyStatusConditionsFromJSON,
        ),
    desiredState: !exists(json, 'desiredState') ? undefined : json['desiredState'],
    desiredStateMetaInfo: !exists(json, 'desiredStateMetaInfo')
      ? undefined
      : V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfoFromJSON(
          json['desiredStateMetaInfo'],
        ),
    policyGeneration: !exists(json, 'policyGeneration') ? undefined : json['policyGeneration'],
  };
}

export function V1beta1NodeNetworkConfigurationEnactmentStatusToJSON(
  value?: V1beta1NodeNetworkConfigurationEnactmentStatus | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    capturedStates:
      value.capturedStates === undefined
        ? undefined
        : mapValues(
            value.capturedStates,
            V1beta1NodeNetworkConfigurationEnactmentStatusCapturedStatesToJSON,
          ),
    conditions:
      value.conditions === undefined
        ? undefined
        : (value.conditions as Array<any>).map(
            V1NodeNetworkConfigurationPolicyStatusConditionsToJSON,
          ),
    desiredState: value.desiredState,
    desiredStateMetaInfo: V1beta1NodeNetworkConfigurationEnactmentStatusMetaInfoToJSON(
      value.desiredStateMetaInfo,
    ),
    policyGeneration: value.policyGeneration,
  };
}
