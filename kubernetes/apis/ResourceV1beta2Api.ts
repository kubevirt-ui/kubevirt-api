/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  IoK8sApiResourceV1beta2DeviceClass,
  IoK8sApiResourceV1beta2DeviceClassFromJSON,
  IoK8sApiResourceV1beta2DeviceClassList,
  IoK8sApiResourceV1beta2DeviceClassListFromJSON,
  IoK8sApiResourceV1beta2DeviceClassToJSON,
  IoK8sApiResourceV1beta2ResourceClaim,
  IoK8sApiResourceV1beta2ResourceClaimFromJSON,
  IoK8sApiResourceV1beta2ResourceClaimList,
  IoK8sApiResourceV1beta2ResourceClaimListFromJSON,
  IoK8sApiResourceV1beta2ResourceClaimTemplate,
  IoK8sApiResourceV1beta2ResourceClaimTemplateFromJSON,
  IoK8sApiResourceV1beta2ResourceClaimTemplateList,
  IoK8sApiResourceV1beta2ResourceClaimTemplateListFromJSON,
  IoK8sApiResourceV1beta2ResourceClaimTemplateToJSON,
  IoK8sApiResourceV1beta2ResourceClaimToJSON,
  IoK8sApiResourceV1beta2ResourceSlice,
  IoK8sApiResourceV1beta2ResourceSliceFromJSON,
  IoK8sApiResourceV1beta2ResourceSliceList,
  IoK8sApiResourceV1beta2ResourceSliceListFromJSON,
  IoK8sApiResourceV1beta2ResourceSliceToJSON,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
  IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
} from '../models';

export interface CreateResourceV1beta2DeviceClassRequest {
  body: IoK8sApiResourceV1beta2DeviceClass;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface CreateResourceV1beta2NamespacedResourceClaimRequest {
  namespace: string;
  body: IoK8sApiResourceV1beta2ResourceClaim;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface CreateResourceV1beta2NamespacedResourceClaimTemplateRequest {
  namespace: string;
  body: IoK8sApiResourceV1beta2ResourceClaimTemplate;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface CreateResourceV1beta2ResourceSliceRequest {
  body: IoK8sApiResourceV1beta2ResourceSlice;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface DeleteResourceV1beta2CollectionDeviceClassRequest {
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta2CollectionNamespacedResourceClaimRequest {
  namespace: string;
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta2CollectionNamespacedResourceClaimTemplateRequest {
  namespace: string;
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta2CollectionResourceSliceRequest {
  pretty?: string;
  _continue?: string;
  dryRun?: string;
  fieldSelector?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  labelSelector?: string;
  limit?: number;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta2DeviceClassRequest {
  name: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta2NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta2NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteResourceV1beta2ResourceSliceRequest {
  name: string;
  pretty?: string;
  dryRun?: string;
  gracePeriodSeconds?: number;
  ignoreStoreReadErrorWithClusterBreakingPotential?: boolean;
  orphanDependents?: boolean;
  propagationPolicy?: string;
  body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListResourceV1beta2DeviceClassRequest {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta2NamespacedResourceClaimRequest {
  namespace: string;
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta2NamespacedResourceClaimTemplateRequest {
  namespace: string;
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta2ResourceClaimForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta2ResourceClaimTemplateForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface ListResourceV1beta2ResourceSliceRequest {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface PatchResourceV1beta2DeviceClassRequest {
  name: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta2NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta2NamespacedResourceClaimStatusRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta2NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface PatchResourceV1beta2ResourceSliceRequest {
  name: string;
  body: object;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
  force?: boolean;
}

export interface ReadResourceV1beta2DeviceClassRequest {
  name: string;
  pretty?: string;
}

export interface ReadResourceV1beta2NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReadResourceV1beta2NamespacedResourceClaimStatusRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReadResourceV1beta2NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  pretty?: string;
}

export interface ReadResourceV1beta2ResourceSliceRequest {
  name: string;
  pretty?: string;
}

export interface ReplaceResourceV1beta2DeviceClassRequest {
  name: string;
  body: IoK8sApiResourceV1beta2DeviceClass;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta2NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  body: IoK8sApiResourceV1beta2ResourceClaim;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta2NamespacedResourceClaimStatusRequest {
  name: string;
  namespace: string;
  body: IoK8sApiResourceV1beta2ResourceClaim;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta2NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  body: IoK8sApiResourceV1beta2ResourceClaimTemplate;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface ReplaceResourceV1beta2ResourceSliceRequest {
  name: string;
  body: IoK8sApiResourceV1beta2ResourceSlice;
  pretty?: string;
  dryRun?: string;
  fieldManager?: string;
  fieldValidation?: string;
}

export interface WatchResourceV1beta2DeviceClassRequest {
  name: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2DeviceClassListRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2NamespacedResourceClaimRequest {
  name: string;
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2NamespacedResourceClaimListRequest {
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2NamespacedResourceClaimTemplateRequest {
  name: string;
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2NamespacedResourceClaimTemplateListRequest {
  namespace: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2ResourceClaimListForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2ResourceClaimTemplateListForAllNamespacesRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2ResourceSliceRequest {
  name: string;
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

export interface WatchResourceV1beta2ResourceSliceListRequest {
  allowWatchBookmarks?: boolean;
  _continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}

/**
 *
 */
export class ResourceV1beta2Api extends runtime.BaseAPI {
  /**
   * create a DeviceClass
   */
  async createResourceV1beta2DeviceClassRaw(
    requestParameters: CreateResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2DeviceClass>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta2DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/deviceclasses`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2DeviceClassToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * create a DeviceClass
   */
  async createResourceV1beta2DeviceClass(
    requestParameters: CreateResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2DeviceClass> {
    const response = await this.createResourceV1beta2DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * create a ResourceClaim
   */
  async createResourceV1beta2NamespacedResourceClaimRaw(
    requestParameters: CreateResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling createResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta2NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2ResourceClaimToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * create a ResourceClaim
   */
  async createResourceV1beta2NamespacedResourceClaim(
    requestParameters: CreateResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.createResourceV1beta2NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * create a ResourceClaimTemplate
   */
  async createResourceV1beta2NamespacedResourceClaimTemplateRaw(
    requestParameters: CreateResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimTemplate>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling createResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2ResourceClaimTemplateToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * create a ResourceClaimTemplate
   */
  async createResourceV1beta2NamespacedResourceClaimTemplate(
    requestParameters: CreateResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimTemplate> {
    const response = await this.createResourceV1beta2NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * create a ResourceSlice
   */
  async createResourceV1beta2ResourceSliceRaw(
    requestParameters: CreateResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceSlice>> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling createResourceV1beta2ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceslices`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2ResourceSliceToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * create a ResourceSlice
   */
  async createResourceV1beta2ResourceSlice(
    requestParameters: CreateResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceSlice> {
    const response = await this.createResourceV1beta2ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of DeviceClass
   */
  async deleteResourceV1beta2CollectionDeviceClassRaw(
    requestParameters: DeleteResourceV1beta2CollectionDeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/deviceclasses`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of DeviceClass
   */
  async deleteResourceV1beta2CollectionDeviceClass(
    requestParameters: DeleteResourceV1beta2CollectionDeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta2CollectionDeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of ResourceClaim
   */
  async deleteResourceV1beta2CollectionNamespacedResourceClaimRaw(
    requestParameters: DeleteResourceV1beta2CollectionNamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta2CollectionNamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of ResourceClaim
   */
  async deleteResourceV1beta2CollectionNamespacedResourceClaim(
    requestParameters: DeleteResourceV1beta2CollectionNamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta2CollectionNamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of ResourceClaimTemplate
   */
  async deleteResourceV1beta2CollectionNamespacedResourceClaimTemplateRaw(
    requestParameters: DeleteResourceV1beta2CollectionNamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta2CollectionNamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of ResourceClaimTemplate
   */
  async deleteResourceV1beta2CollectionNamespacedResourceClaimTemplate(
    requestParameters: DeleteResourceV1beta2CollectionNamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta2CollectionNamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete collection of ResourceSlice
   */
  async deleteResourceV1beta2CollectionResourceSliceRaw(
    requestParameters: DeleteResourceV1beta2CollectionResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceslices`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue),
    );
  }

  /**
   * delete collection of ResourceSlice
   */
  async deleteResourceV1beta2CollectionResourceSlice(
    requestParameters: DeleteResourceV1beta2CollectionResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
    const response = await this.deleteResourceV1beta2CollectionResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a DeviceClass
   */
  async deleteResourceV1beta2DeviceClassRaw(
    requestParameters: DeleteResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta2DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * delete a DeviceClass
   */
  async deleteResourceV1beta2DeviceClass(
    requestParameters: DeleteResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2DeviceClass> {
    const response = await this.deleteResourceV1beta2DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a ResourceClaim
   */
  async deleteResourceV1beta2NamespacedResourceClaimRaw(
    requestParameters: DeleteResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta2NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * delete a ResourceClaim
   */
  async deleteResourceV1beta2NamespacedResourceClaim(
    requestParameters: DeleteResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.deleteResourceV1beta2NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a ResourceClaimTemplate
   */
  async deleteResourceV1beta2NamespacedResourceClaimTemplateRaw(
    requestParameters: DeleteResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling deleteResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * delete a ResourceClaimTemplate
   */
  async deleteResourceV1beta2NamespacedResourceClaimTemplate(
    requestParameters: DeleteResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimTemplate> {
    const response = await this.deleteResourceV1beta2NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * delete a ResourceSlice
   */
  async deleteResourceV1beta2ResourceSliceRaw(
    requestParameters: DeleteResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling deleteResourceV1beta2ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.gracePeriodSeconds !== undefined) {
      queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
    }

    if (requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential !== undefined) {
      queryParameters['ignoreStoreReadErrorWithClusterBreakingPotential'] =
        requestParameters.ignoreStoreReadErrorWithClusterBreakingPotential;
    }

    if (requestParameters.orphanDependents !== undefined) {
      queryParameters['orphanDependents'] = requestParameters.orphanDependents;
    }

    if (requestParameters.propagationPolicy !== undefined) {
      queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * delete a ResourceSlice
   */
  async deleteResourceV1beta2ResourceSlice(
    requestParameters: DeleteResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceSlice> {
    const response = await this.deleteResourceV1beta2ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * get available resources
   */
  async getResourceV1beta2APIResourcesRaw(
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue),
    );
  }

  /**
   * get available resources
   */
  async getResourceV1beta2APIResources(
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
    const response = await this.getResourceV1beta2APIResourcesRaw(initOverrides);
    return await response.value();
  }

  /**
   * list or watch objects of kind DeviceClass
   */
  async listResourceV1beta2DeviceClassRaw(
    requestParameters: ListResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2DeviceClassList>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/deviceclasses`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2DeviceClassListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind DeviceClass
   */
  async listResourceV1beta2DeviceClass(
    requestParameters: ListResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2DeviceClassList> {
    const response = await this.listResourceV1beta2DeviceClassRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta2NamespacedResourceClaimRaw(
    requestParameters: ListResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimList>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling listResourceV1beta2NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta2NamespacedResourceClaim(
    requestParameters: ListResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimList> {
    const response = await this.listResourceV1beta2NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta2NamespacedResourceClaimTemplateRaw(
    requestParameters: ListResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimTemplateList>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling listResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimTemplateListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta2NamespacedResourceClaimTemplate(
    requestParameters: ListResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimTemplateList> {
    const response = await this.listResourceV1beta2NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta2ResourceClaimForAllNamespacesRaw(
    requestParameters: ListResourceV1beta2ResourceClaimForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimList>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceclaims`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaim
   */
  async listResourceV1beta2ResourceClaimForAllNamespaces(
    requestParameters: ListResourceV1beta2ResourceClaimForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimList> {
    const response = await this.listResourceV1beta2ResourceClaimForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta2ResourceClaimTemplateForAllNamespacesRaw(
    requestParameters: ListResourceV1beta2ResourceClaimTemplateForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimTemplateList>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceclaimtemplates`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimTemplateListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceClaimTemplate
   */
  async listResourceV1beta2ResourceClaimTemplateForAllNamespaces(
    requestParameters: ListResourceV1beta2ResourceClaimTemplateForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimTemplateList> {
    const response = await this.listResourceV1beta2ResourceClaimTemplateForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * list or watch objects of kind ResourceSlice
   */
  async listResourceV1beta2ResourceSliceRaw(
    requestParameters: ListResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceSliceList>> {
    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceslices`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceSliceListFromJSON(jsonValue),
    );
  }

  /**
   * list or watch objects of kind ResourceSlice
   */
  async listResourceV1beta2ResourceSlice(
    requestParameters: ListResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceSliceList> {
    const response = await this.listResourceV1beta2ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified DeviceClass
   */
  async patchResourceV1beta2DeviceClassRaw(
    requestParameters: PatchResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta2DeviceClass.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta2DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified DeviceClass
   */
  async patchResourceV1beta2DeviceClass(
    requestParameters: PatchResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2DeviceClass> {
    const response = await this.patchResourceV1beta2DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified ResourceClaim
   */
  async patchResourceV1beta2NamespacedResourceClaimRaw(
    requestParameters: PatchResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta2NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified ResourceClaim
   */
  async patchResourceV1beta2NamespacedResourceClaim(
    requestParameters: PatchResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.patchResourceV1beta2NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update status of the specified ResourceClaim
   */
  async patchResourceV1beta2NamespacedResourceClaimStatusRaw(
    requestParameters: PatchResourceV1beta2NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * partially update status of the specified ResourceClaim
   */
  async patchResourceV1beta2NamespacedResourceClaimStatus(
    requestParameters: PatchResourceV1beta2NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.patchResourceV1beta2NamespacedResourceClaimStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified ResourceClaimTemplate
   */
  async patchResourceV1beta2NamespacedResourceClaimTemplateRaw(
    requestParameters: PatchResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling patchResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified ResourceClaimTemplate
   */
  async patchResourceV1beta2NamespacedResourceClaimTemplate(
    requestParameters: PatchResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimTemplate> {
    const response = await this.patchResourceV1beta2NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * partially update the specified ResourceSlice
   */
  async patchResourceV1beta2ResourceSliceRaw(
    requestParameters: PatchResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling patchResourceV1beta2ResourceSlice.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling patchResourceV1beta2ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    if (requestParameters.force !== undefined) {
      queryParameters['force'] = requestParameters.force;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.body as any,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * partially update the specified ResourceSlice
   */
  async patchResourceV1beta2ResourceSlice(
    requestParameters: PatchResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceSlice> {
    const response = await this.patchResourceV1beta2ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified DeviceClass
   */
  async readResourceV1beta2DeviceClassRaw(
    requestParameters: ReadResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta2DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * read the specified DeviceClass
   */
  async readResourceV1beta2DeviceClass(
    requestParameters: ReadResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2DeviceClass> {
    const response = await this.readResourceV1beta2DeviceClassRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * read the specified ResourceClaim
   */
  async readResourceV1beta2NamespacedResourceClaimRaw(
    requestParameters: ReadResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readResourceV1beta2NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * read the specified ResourceClaim
   */
  async readResourceV1beta2NamespacedResourceClaim(
    requestParameters: ReadResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.readResourceV1beta2NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read status of the specified ResourceClaim
   */
  async readResourceV1beta2NamespacedResourceClaimStatusRaw(
    requestParameters: ReadResourceV1beta2NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * read status of the specified ResourceClaim
   */
  async readResourceV1beta2NamespacedResourceClaimStatus(
    requestParameters: ReadResourceV1beta2NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.readResourceV1beta2NamespacedResourceClaimStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified ResourceClaimTemplate
   */
  async readResourceV1beta2NamespacedResourceClaimTemplateRaw(
    requestParameters: ReadResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling readResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * read the specified ResourceClaimTemplate
   */
  async readResourceV1beta2NamespacedResourceClaimTemplate(
    requestParameters: ReadResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimTemplate> {
    const response = await this.readResourceV1beta2NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * read the specified ResourceSlice
   */
  async readResourceV1beta2ResourceSliceRaw(
    requestParameters: ReadResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling readResourceV1beta2ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * read the specified ResourceSlice
   */
  async readResourceV1beta2ResourceSlice(
    requestParameters: ReadResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceSlice> {
    const response = await this.readResourceV1beta2ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified DeviceClass
   */
  async replaceResourceV1beta2DeviceClassRaw(
    requestParameters: ReplaceResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2DeviceClass>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta2DeviceClass.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta2DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2DeviceClassToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2DeviceClassFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified DeviceClass
   */
  async replaceResourceV1beta2DeviceClass(
    requestParameters: ReplaceResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2DeviceClass> {
    const response = await this.replaceResourceV1beta2DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified ResourceClaim
   */
  async replaceResourceV1beta2NamespacedResourceClaimRaw(
    requestParameters: ReplaceResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2ResourceClaimToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified ResourceClaim
   */
  async replaceResourceV1beta2NamespacedResourceClaim(
    requestParameters: ReplaceResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.replaceResourceV1beta2NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace status of the specified ResourceClaim
   */
  async replaceResourceV1beta2NamespacedResourceClaimStatusRaw(
    requestParameters: ReplaceResourceV1beta2NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaim>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaimStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaims/{name}/status`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2ResourceClaimToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimFromJSON(jsonValue),
    );
  }

  /**
   * replace status of the specified ResourceClaim
   */
  async replaceResourceV1beta2NamespacedResourceClaimStatus(
    requestParameters: ReplaceResourceV1beta2NamespacedResourceClaimStatusRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaim> {
    const response = await this.replaceResourceV1beta2NamespacedResourceClaimStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified ResourceClaimTemplate
   */
  async replaceResourceV1beta2NamespacedResourceClaimTemplateRaw(
    requestParameters: ReplaceResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceClaimTemplate>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2ResourceClaimTemplateToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceClaimTemplateFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified ResourceClaimTemplate
   */
  async replaceResourceV1beta2NamespacedResourceClaimTemplate(
    requestParameters: ReplaceResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceClaimTemplate> {
    const response = await this.replaceResourceV1beta2NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * replace the specified ResourceSlice
   */
  async replaceResourceV1beta2ResourceSliceRaw(
    requestParameters: ReplaceResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApiResourceV1beta2ResourceSlice>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling replaceResourceV1beta2ResourceSlice.',
      );
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter requestParameters.body was null or undefined when calling replaceResourceV1beta2ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.dryRun !== undefined) {
      queryParameters['dryRun'] = requestParameters.dryRun;
    }

    if (requestParameters.fieldManager !== undefined) {
      queryParameters['fieldManager'] = requestParameters.fieldManager;
    }

    if (requestParameters.fieldValidation !== undefined) {
      queryParameters['fieldValidation'] = requestParameters.fieldValidation;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: IoK8sApiResourceV1beta2ResourceSliceToJSON(requestParameters.body),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApiResourceV1beta2ResourceSliceFromJSON(jsonValue),
    );
  }

  /**
   * replace the specified ResourceSlice
   */
  async replaceResourceV1beta2ResourceSlice(
    requestParameters: ReplaceResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApiResourceV1beta2ResourceSlice> {
    const response = await this.replaceResourceV1beta2ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2DeviceClassRaw(
    requestParameters: WatchResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta2DeviceClass.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/deviceclasses/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2DeviceClass(
    requestParameters: WatchResourceV1beta2DeviceClassRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2DeviceClassRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2DeviceClassListRaw(
    requestParameters: WatchResourceV1beta2DeviceClassListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/deviceclasses`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of DeviceClass. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2DeviceClassList(
    requestParameters: WatchResourceV1beta2DeviceClassListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2DeviceClassListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2NamespacedResourceClaimRaw(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta2NamespacedResourceClaim.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta2NamespacedResourceClaim.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/namespaces/{namespace}/resourceclaims/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2NamespacedResourceClaim(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2NamespacedResourceClaimRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2NamespacedResourceClaimListRaw(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta2NamespacedResourceClaimList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/namespaces/{namespace}/resourceclaims`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2NamespacedResourceClaimList(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2NamespacedResourceClaimListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2NamespacedResourceClaimTemplateRaw(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta2NamespacedResourceClaimTemplate.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/namespaces/{namespace}/resourceclaimtemplates/{name}`
          .replace(`{${'name'}}`, encodeURIComponent(String(requestParameters.name)))
          .replace(`{${'namespace'}}`, encodeURIComponent(String(requestParameters.namespace))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2NamespacedResourceClaimTemplate(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimTemplateRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2NamespacedResourceClaimTemplateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2NamespacedResourceClaimTemplateListRaw(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimTemplateListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
      throw new runtime.RequiredError(
        'namespace',
        'Required parameter requestParameters.namespace was null or undefined when calling watchResourceV1beta2NamespacedResourceClaimTemplateList.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/namespaces/{namespace}/resourceclaimtemplates`.replace(
          `{${'namespace'}}`,
          encodeURIComponent(String(requestParameters.namespace)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2NamespacedResourceClaimTemplateList(
    requestParameters: WatchResourceV1beta2NamespacedResourceClaimTemplateListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2NamespacedResourceClaimTemplateListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2ResourceClaimListForAllNamespacesRaw(
    requestParameters: WatchResourceV1beta2ResourceClaimListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/resourceclaims`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaim. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2ResourceClaimListForAllNamespaces(
    requestParameters: WatchResourceV1beta2ResourceClaimListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2ResourceClaimListForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2ResourceClaimTemplateListForAllNamespacesRaw(
    requestParameters: WatchResourceV1beta2ResourceClaimTemplateListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/resourceclaimtemplates`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceClaimTemplate. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2ResourceClaimTemplateListForAllNamespaces(
    requestParameters: WatchResourceV1beta2ResourceClaimTemplateListForAllNamespacesRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2ResourceClaimTemplateListForAllNamespacesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch changes to an object of kind ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2ResourceSliceRaw(
    requestParameters: WatchResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling watchResourceV1beta2ResourceSlice.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/resourceslices/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch changes to an object of kind ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
   */
  async watchResourceV1beta2ResourceSlice(
    requestParameters: WatchResourceV1beta2ResourceSliceRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2ResourceSliceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * watch individual changes to a list of ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2ResourceSliceListRaw(
    requestParameters: WatchResourceV1beta2ResourceSliceListRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
    const queryParameters: any = {};

    if (requestParameters.allowWatchBookmarks !== undefined) {
      queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
    }

    if (requestParameters._continue !== undefined) {
      queryParameters['continue'] = requestParameters._continue;
    }

    if (requestParameters.fieldSelector !== undefined) {
      queryParameters['fieldSelector'] = requestParameters.fieldSelector;
    }

    if (requestParameters.labelSelector !== undefined) {
      queryParameters['labelSelector'] = requestParameters.labelSelector;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.pretty !== undefined) {
      queryParameters['pretty'] = requestParameters.pretty;
    }

    if (requestParameters.resourceVersion !== undefined) {
      queryParameters['resourceVersion'] = requestParameters.resourceVersion;
    }

    if (requestParameters.resourceVersionMatch !== undefined) {
      queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
    }

    if (requestParameters.sendInitialEvents !== undefined) {
      queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
    }

    if (requestParameters.timeoutSeconds !== undefined) {
      queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
    }

    if (requestParameters.watch !== undefined) {
      queryParameters['watch'] = requestParameters.watch;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey('authorization'); // BearerToken authentication
    }

    const response = await this.request(
      {
        path: `/apis/resource.k8s.io/v1beta2/watch/resourceslices`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue),
    );
  }

  /**
   * watch individual changes to a list of ResourceSlice. deprecated: use the \'watch\' parameter with a list operation instead.
   */
  async watchResourceV1beta2ResourceSliceList(
    requestParameters: WatchResourceV1beta2ResourceSliceListRequest,
    initOverrides?: RequestInit,
  ): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
    const response = await this.watchResourceV1beta2ResourceSliceListRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
