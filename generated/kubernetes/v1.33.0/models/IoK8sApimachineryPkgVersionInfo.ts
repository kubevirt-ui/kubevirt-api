/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Info contains versioning information. how we'll want to distribute that information.
 * @export
 * @interface IoK8sApimachineryPkgVersionInfo
 */
export interface IoK8sApimachineryPkgVersionInfo {
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    buildDate: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    compiler: string;
    /**
     * EmulationMajor is the major version of the emulation version
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    emulationMajor?: string;
    /**
     * EmulationMinor is the minor version of the emulation version
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    emulationMinor?: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    gitCommit: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    gitTreeState: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    gitVersion: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    goVersion: string;
    /**
     * Major is the major version of the binary version
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    major: string;
    /**
     * MinCompatibilityMajor is the major version of the minimum compatibility version
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    minCompatibilityMajor?: string;
    /**
     * MinCompatibilityMinor is the minor version of the minimum compatibility version
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    minCompatibilityMinor?: string;
    /**
     * Minor is the minor version of the binary version
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    minor: string;
    /**
     * 
     * @type {string}
     * @memberof IoK8sApimachineryPkgVersionInfo
     */
    platform: string;
}

export function IoK8sApimachineryPkgVersionInfoFromJSON(json: any): IoK8sApimachineryPkgVersionInfo {
    return IoK8sApimachineryPkgVersionInfoFromJSONTyped(json, false);
}

export function IoK8sApimachineryPkgVersionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApimachineryPkgVersionInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'buildDate': json['buildDate'],
        'compiler': json['compiler'],
        'emulationMajor': !exists(json, 'emulationMajor') ? undefined : json['emulationMajor'],
        'emulationMinor': !exists(json, 'emulationMinor') ? undefined : json['emulationMinor'],
        'gitCommit': json['gitCommit'],
        'gitTreeState': json['gitTreeState'],
        'gitVersion': json['gitVersion'],
        'goVersion': json['goVersion'],
        'major': json['major'],
        'minCompatibilityMajor': !exists(json, 'minCompatibilityMajor') ? undefined : json['minCompatibilityMajor'],
        'minCompatibilityMinor': !exists(json, 'minCompatibilityMinor') ? undefined : json['minCompatibilityMinor'],
        'minor': json['minor'],
        'platform': json['platform'],
    };
}

export function IoK8sApimachineryPkgVersionInfoToJSON(value?: IoK8sApimachineryPkgVersionInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'buildDate': value.buildDate,
        'compiler': value.compiler,
        'emulationMajor': value.emulationMajor,
        'emulationMinor': value.emulationMinor,
        'gitCommit': value.gitCommit,
        'gitTreeState': value.gitTreeState,
        'gitVersion': value.gitVersion,
        'goVersion': value.goVersion,
        'major': value.major,
        'minCompatibilityMajor': value.minCompatibilityMajor,
        'minCompatibilityMinor': value.minCompatibilityMinor,
        'minor': value.minor,
        'platform': value.platform,
    };
}

