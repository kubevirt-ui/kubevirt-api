/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IoK8sApiCertificatesV1CertificateSigningRequest,
    IoK8sApiCertificatesV1CertificateSigningRequestFromJSON,
    IoK8sApiCertificatesV1CertificateSigningRequestToJSON,
    IoK8sApiCertificatesV1CertificateSigningRequestList,
    IoK8sApiCertificatesV1CertificateSigningRequestListFromJSON,
    IoK8sApiCertificatesV1CertificateSigningRequestListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateCertificatesV1CertificateSigningRequestRequest {
    body: IoK8sApiCertificatesV1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface DeleteCertificatesV1CertificateSigningRequestRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCertificatesV1CollectionCertificateSigningRequestRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListCertificatesV1CertificateSigningRequestRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchCertificatesV1CertificateSigningRequestRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchCertificatesV1CertificateSigningRequestApprovalRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchCertificatesV1CertificateSigningRequestStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ReadCertificatesV1CertificateSigningRequestRequest {
    name: string;
    pretty?: string;
}

export interface ReadCertificatesV1CertificateSigningRequestApprovalRequest {
    name: string;
    pretty?: string;
}

export interface ReadCertificatesV1CertificateSigningRequestStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceCertificatesV1CertificateSigningRequestRequest {
    name: string;
    body: IoK8sApiCertificatesV1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceCertificatesV1CertificateSigningRequestApprovalRequest {
    name: string;
    body: IoK8sApiCertificatesV1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceCertificatesV1CertificateSigningRequestStatusRequest {
    name: string;
    body: IoK8sApiCertificatesV1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface WatchCertificatesV1CertificateSigningRequestRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCertificatesV1CertificateSigningRequestListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class CertificatesV1Api extends runtime.BaseAPI {

    /**
     * create a CertificateSigningRequest
     */
    async createCertificatesV1CertificateSigningRequestRaw(requestParameters: CreateCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCertificatesV1CertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1CertificateSigningRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * create a CertificateSigningRequest
     */
    async createCertificatesV1CertificateSigningRequest(requestParameters: CreateCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.createCertificatesV1CertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a CertificateSigningRequest
     */
    async deleteCertificatesV1CertificateSigningRequestRaw(requestParameters: DeleteCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCertificatesV1CertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a CertificateSigningRequest
     */
    async deleteCertificatesV1CertificateSigningRequest(requestParameters: DeleteCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCertificatesV1CertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of CertificateSigningRequest
     */
    async deleteCertificatesV1CollectionCertificateSigningRequestRaw(requestParameters: DeleteCertificatesV1CollectionCertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CertificateSigningRequest
     */
    async deleteCertificatesV1CollectionCertificateSigningRequest(requestParameters: DeleteCertificatesV1CollectionCertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCertificatesV1CollectionCertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getCertificatesV1APIResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getCertificatesV1APIResources(initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getCertificatesV1APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    async listCertificatesV1CertificateSigningRequestRaw(requestParameters: ListCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequestList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    async listCertificatesV1CertificateSigningRequest(requestParameters: ListCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequestList> {
        const response = await this.listCertificatesV1CertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified CertificateSigningRequest
     */
    async patchCertificatesV1CertificateSigningRequestRaw(requestParameters: PatchCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificatesV1CertificateSigningRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificatesV1CertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update the specified CertificateSigningRequest
     */
    async patchCertificatesV1CertificateSigningRequest(requestParameters: PatchCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.patchCertificatesV1CertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update approval of the specified CertificateSigningRequest
     */
    async patchCertificatesV1CertificateSigningRequestApprovalRaw(requestParameters: PatchCertificatesV1CertificateSigningRequestApprovalRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificatesV1CertificateSigningRequestApproval.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificatesV1CertificateSigningRequestApproval.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update approval of the specified CertificateSigningRequest
     */
    async patchCertificatesV1CertificateSigningRequestApproval(requestParameters: PatchCertificatesV1CertificateSigningRequestApprovalRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.patchCertificatesV1CertificateSigningRequestApprovalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified CertificateSigningRequest
     */
    async patchCertificatesV1CertificateSigningRequestStatusRaw(requestParameters: PatchCertificatesV1CertificateSigningRequestStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificatesV1CertificateSigningRequestStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificatesV1CertificateSigningRequestStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified CertificateSigningRequest
     */
    async patchCertificatesV1CertificateSigningRequestStatus(requestParameters: PatchCertificatesV1CertificateSigningRequestStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.patchCertificatesV1CertificateSigningRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified CertificateSigningRequest
     */
    async readCertificatesV1CertificateSigningRequestRaw(requestParameters: ReadCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificatesV1CertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read the specified CertificateSigningRequest
     */
    async readCertificatesV1CertificateSigningRequest(requestParameters: ReadCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.readCertificatesV1CertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read approval of the specified CertificateSigningRequest
     */
    async readCertificatesV1CertificateSigningRequestApprovalRaw(requestParameters: ReadCertificatesV1CertificateSigningRequestApprovalRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificatesV1CertificateSigningRequestApproval.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read approval of the specified CertificateSigningRequest
     */
    async readCertificatesV1CertificateSigningRequestApproval(requestParameters: ReadCertificatesV1CertificateSigningRequestApprovalRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.readCertificatesV1CertificateSigningRequestApprovalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified CertificateSigningRequest
     */
    async readCertificatesV1CertificateSigningRequestStatusRaw(requestParameters: ReadCertificatesV1CertificateSigningRequestStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificatesV1CertificateSigningRequestStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read status of the specified CertificateSigningRequest
     */
    async readCertificatesV1CertificateSigningRequestStatus(requestParameters: ReadCertificatesV1CertificateSigningRequestStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.readCertificatesV1CertificateSigningRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified CertificateSigningRequest
     */
    async replaceCertificatesV1CertificateSigningRequestRaw(requestParameters: ReplaceCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificatesV1CertificateSigningRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificatesV1CertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1CertificateSigningRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace the specified CertificateSigningRequest
     */
    async replaceCertificatesV1CertificateSigningRequest(requestParameters: ReplaceCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.replaceCertificatesV1CertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace approval of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1CertificateSigningRequestApprovalRaw(requestParameters: ReplaceCertificatesV1CertificateSigningRequestApprovalRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificatesV1CertificateSigningRequestApproval.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificatesV1CertificateSigningRequestApproval.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1CertificateSigningRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace approval of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1CertificateSigningRequestApproval(requestParameters: ReplaceCertificatesV1CertificateSigningRequestApprovalRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.replaceCertificatesV1CertificateSigningRequestApprovalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1CertificateSigningRequestStatusRaw(requestParameters: ReplaceCertificatesV1CertificateSigningRequestStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificatesV1CertificateSigningRequestStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificatesV1CertificateSigningRequestStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1CertificateSigningRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace status of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1CertificateSigningRequestStatus(requestParameters: ReplaceCertificatesV1CertificateSigningRequestStatusRequest, initOverrides?: RequestInit): Promise<IoK8sApiCertificatesV1CertificateSigningRequest> {
        const response = await this.replaceCertificatesV1CertificateSigningRequestStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCertificatesV1CertificateSigningRequestRaw(requestParameters: WatchCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCertificatesV1CertificateSigningRequest.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCertificatesV1CertificateSigningRequest(requestParameters: WatchCertificatesV1CertificateSigningRequestRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCertificatesV1CertificateSigningRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCertificatesV1CertificateSigningRequestListRaw(requestParameters: WatchCertificatesV1CertificateSigningRequestListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1/watch/certificatesigningrequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCertificatesV1CertificateSigningRequestList(requestParameters: WatchCertificatesV1CertificateSigningRequestListRequest, initOverrides?: RequestInit): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCertificatesV1CertificateSigningRequestListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
