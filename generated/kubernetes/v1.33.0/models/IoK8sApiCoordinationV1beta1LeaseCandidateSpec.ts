/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * LeaseCandidateSpec is a specification of a Lease.
 * @export
 * @interface IoK8sApiCoordinationV1beta1LeaseCandidateSpec
 */
export interface IoK8sApiCoordinationV1beta1LeaseCandidateSpec {
    /**
     * BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.
     * @type {string}
     * @memberof IoK8sApiCoordinationV1beta1LeaseCandidateSpec
     */
    binaryVersion: string;
    /**
     * EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"
     * @type {string}
     * @memberof IoK8sApiCoordinationV1beta1LeaseCandidateSpec
     */
    emulationVersion?: string;
    /**
     * LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable.
     * @type {string}
     * @memberof IoK8sApiCoordinationV1beta1LeaseCandidateSpec
     */
    leaseName: string;
    /**
     * MicroTime is version of Time with microsecond level precision.
     * @type {string}
     * @memberof IoK8sApiCoordinationV1beta1LeaseCandidateSpec
     */
    pingTime?: string;
    /**
     * MicroTime is version of Time with microsecond level precision.
     * @type {string}
     * @memberof IoK8sApiCoordinationV1beta1LeaseCandidateSpec
     */
    renewTime?: string;
    /**
     * Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved.
     * @type {string}
     * @memberof IoK8sApiCoordinationV1beta1LeaseCandidateSpec
     */
    strategy: string;
}

export function IoK8sApiCoordinationV1beta1LeaseCandidateSpecFromJSON(json: any): IoK8sApiCoordinationV1beta1LeaseCandidateSpec {
    return IoK8sApiCoordinationV1beta1LeaseCandidateSpecFromJSONTyped(json, false);
}

export function IoK8sApiCoordinationV1beta1LeaseCandidateSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoordinationV1beta1LeaseCandidateSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'binaryVersion': json['binaryVersion'],
        'emulationVersion': !exists(json, 'emulationVersion') ? undefined : json['emulationVersion'],
        'leaseName': json['leaseName'],
        'pingTime': !exists(json, 'pingTime') ? undefined : (new Date(json['pingTime'])),
        'renewTime': !exists(json, 'renewTime') ? undefined : (new Date(json['renewTime'])),
        'strategy': json['strategy'],
    };
}

export function IoK8sApiCoordinationV1beta1LeaseCandidateSpecToJSON(value?: IoK8sApiCoordinationV1beta1LeaseCandidateSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'binaryVersion': value.binaryVersion,
        'emulationVersion': value.emulationVersion,
        'leaseName': value.leaseName,
        'pingTime': value.pingTime === undefined ? undefined : (value.pingTime.toISOString()),
        'renewTime': value.renewTime === undefined ? undefined : (value.renewTime.toISOString()),
        'strategy': value.strategy,
    };
}

