/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
 * 
 * The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
 * @export
 * @interface IoK8sApiCoreV1ConfigMapEnvSource
 */
export interface IoK8sApiCoreV1ConfigMapEnvSource {
    /**
     * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * @type {string}
     * @memberof IoK8sApiCoreV1ConfigMapEnvSource
     */
    name?: string;
    /**
     * Specify whether the ConfigMap must be defined
     * @type {boolean}
     * @memberof IoK8sApiCoreV1ConfigMapEnvSource
     */
    optional?: boolean;
}

export function IoK8sApiCoreV1ConfigMapEnvSourceFromJSON(json: any): IoK8sApiCoreV1ConfigMapEnvSource {
    return IoK8sApiCoreV1ConfigMapEnvSourceFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1ConfigMapEnvSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1ConfigMapEnvSource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'optional': !exists(json, 'optional') ? undefined : json['optional'],
    };
}

export function IoK8sApiCoreV1ConfigMapEnvSourceToJSON(value?: IoK8sApiCoreV1ConfigMapEnvSource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'optional': value.optional,
    };
}

