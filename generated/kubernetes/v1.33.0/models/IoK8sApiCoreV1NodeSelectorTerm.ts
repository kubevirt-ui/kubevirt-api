/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IoK8sApiCoreV1NodeSelectorRequirement,
    IoK8sApiCoreV1NodeSelectorRequirementFromJSON,
    IoK8sApiCoreV1NodeSelectorRequirementFromJSONTyped,
    IoK8sApiCoreV1NodeSelectorRequirementToJSON,
} from './';

/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 * @export
 * @interface IoK8sApiCoreV1NodeSelectorTerm
 */
export interface IoK8sApiCoreV1NodeSelectorTerm {
    /**
     * A list of node selector requirements by node's labels.
     * @type {Array<IoK8sApiCoreV1NodeSelectorRequirement>}
     * @memberof IoK8sApiCoreV1NodeSelectorTerm
     */
    matchExpressions?: Array<IoK8sApiCoreV1NodeSelectorRequirement>;
    /**
     * A list of node selector requirements by node's fields.
     * @type {Array<IoK8sApiCoreV1NodeSelectorRequirement>}
     * @memberof IoK8sApiCoreV1NodeSelectorTerm
     */
    matchFields?: Array<IoK8sApiCoreV1NodeSelectorRequirement>;
}

export function IoK8sApiCoreV1NodeSelectorTermFromJSON(json: any): IoK8sApiCoreV1NodeSelectorTerm {
    return IoK8sApiCoreV1NodeSelectorTermFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1NodeSelectorTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1NodeSelectorTerm {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'matchExpressions': !exists(json, 'matchExpressions') ? undefined : ((json['matchExpressions'] as Array<any>).map(IoK8sApiCoreV1NodeSelectorRequirementFromJSON)),
        'matchFields': !exists(json, 'matchFields') ? undefined : ((json['matchFields'] as Array<any>).map(IoK8sApiCoreV1NodeSelectorRequirementFromJSON)),
    };
}

export function IoK8sApiCoreV1NodeSelectorTermToJSON(value?: IoK8sApiCoreV1NodeSelectorTerm | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'matchExpressions': value.matchExpressions === undefined ? undefined : ((value.matchExpressions as Array<any>).map(IoK8sApiCoreV1NodeSelectorRequirementToJSON)),
        'matchFields': value.matchFields === undefined ? undefined : ((value.matchFields as Array<any>).map(IoK8sApiCoreV1NodeSelectorRequirementToJSON)),
    };
}

