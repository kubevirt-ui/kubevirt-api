/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1DeviceAttribute,
    V1DeviceAttributeFromJSON,
    V1DeviceAttributeFromJSONTyped,
    V1DeviceAttributeToJSON,
} from './';

/**
 * DeviceResourceClaimStatus has to be before SyncVMI call from virt-handler to virt-launcher
 * @export
 * @interface V1DeviceResourceClaimStatus
 */
export interface V1DeviceResourceClaimStatus {
    /**
     * 
     * @type {V1DeviceAttribute}
     * @memberof V1DeviceResourceClaimStatus
     */
    attributes?: V1DeviceAttribute;
    /**
     * Name is the name of actual device on the host provisioned by the driver as reflected in resourceclaim.status
     * @type {string}
     * @memberof V1DeviceResourceClaimStatus
     */
    name?: string;
    /**
     * ResourceClaimName is the name of the resource claims object used to provision this resource
     * @type {string}
     * @memberof V1DeviceResourceClaimStatus
     */
    resourceClaimName?: string;
}

export function V1DeviceResourceClaimStatusFromJSON(json: any): V1DeviceResourceClaimStatus {
    return V1DeviceResourceClaimStatusFromJSONTyped(json, false);
}

export function V1DeviceResourceClaimStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1DeviceResourceClaimStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributes': !exists(json, 'attributes') ? undefined : V1DeviceAttributeFromJSON(json['attributes']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'resourceClaimName': !exists(json, 'resourceClaimName') ? undefined : json['resourceClaimName'],
    };
}

export function V1DeviceResourceClaimStatusToJSON(value?: V1DeviceResourceClaimStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributes': V1DeviceAttributeToJSON(value.attributes),
        'name': value.name,
        'resourceClaimName': value.resourceClaimName,
    };
}

