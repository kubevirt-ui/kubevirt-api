/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  IoK8sApiResourceV1beta1BasicDevice,
  IoK8sApiResourceV1beta1BasicDeviceFromJSON,
  IoK8sApiResourceV1beta1BasicDeviceToJSON,
} from './';

/**
 * Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.
 * @export
 * @interface IoK8sApiResourceV1beta1Device
 */
export interface IoK8sApiResourceV1beta1Device {
  /**
   *
   * @type {IoK8sApiResourceV1beta1BasicDevice}
   * @memberof IoK8sApiResourceV1beta1Device
   */
  basic?: IoK8sApiResourceV1beta1BasicDevice;
  /**
   * Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label.
   * @type {string}
   * @memberof IoK8sApiResourceV1beta1Device
   */
  name: string;
}

export function IoK8sApiResourceV1beta1DeviceFromJSON(json: any): IoK8sApiResourceV1beta1Device {
  return IoK8sApiResourceV1beta1DeviceFromJSONTyped(json, false);
}

export function IoK8sApiResourceV1beta1DeviceFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): IoK8sApiResourceV1beta1Device {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    basic: !exists(json, 'basic')
      ? undefined
      : IoK8sApiResourceV1beta1BasicDeviceFromJSON(json['basic']),
    name: json['name'],
  };
}

export function IoK8sApiResourceV1beta1DeviceToJSON(
  value?: IoK8sApiResourceV1beta1Device | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    basic: IoK8sApiResourceV1beta1BasicDeviceToJSON(value.basic),
    name: value.name,
  };
}
