/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1Disk,
    V1DiskFromJSON,
    V1DiskFromJSONTyped,
    V1DiskToJSON,
    V1HotplugVolumeSource,
    V1HotplugVolumeSourceFromJSON,
    V1HotplugVolumeSourceFromJSONTyped,
    V1HotplugVolumeSourceToJSON,
} from './';

/**
 * AddVolumeOptions is provided when dynamically hot plugging a volume and disk
 * @export
 * @interface V1AddVolumeOptions
 */
export interface V1AddVolumeOptions {
    /**
     * 
     * @type {V1Disk}
     * @memberof V1AddVolumeOptions
     */
    disk: V1Disk;
    /**
     * When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @type {Array<string>}
     * @memberof V1AddVolumeOptions
     */
    dryRun?: Array<string>;
    /**
     * Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.
     * @type {string}
     * @memberof V1AddVolumeOptions
     */
    name: string;
    /**
     * 
     * @type {V1HotplugVolumeSource}
     * @memberof V1AddVolumeOptions
     */
    volumeSource: V1HotplugVolumeSource;
}

export function V1AddVolumeOptionsFromJSON(json: any): V1AddVolumeOptions {
    return V1AddVolumeOptionsFromJSONTyped(json, false);
}

export function V1AddVolumeOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1AddVolumeOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'disk': V1DiskFromJSON(json['disk']),
        'dryRun': !exists(json, 'dryRun') ? undefined : json['dryRun'],
        'name': json['name'],
        'volumeSource': V1HotplugVolumeSourceFromJSON(json['volumeSource']),
    };
}

export function V1AddVolumeOptionsToJSON(value?: V1AddVolumeOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'disk': V1DiskToJSON(value.disk),
        'dryRun': value.dryRun,
        'name': value.name,
        'volumeSource': V1HotplugVolumeSourceToJSON(value.volumeSource),
    };
}

