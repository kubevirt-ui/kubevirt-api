/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unversioned
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IoK8sApiBatchV1JobTemplateSpec,
    IoK8sApiBatchV1JobTemplateSpecFromJSON,
    IoK8sApiBatchV1JobTemplateSpecFromJSONTyped,
    IoK8sApiBatchV1JobTemplateSpecToJSON,
} from './';

/**
 * CronJobSpec describes how the job execution will look like and when it will actually run.
 * @export
 * @interface IoK8sApiBatchV1CronJobSpec
 */
export interface IoK8sApiBatchV1CronJobSpec {
    /**
     * Specifies how to treat concurrent executions of a Job. Valid values are:
     * 
     * - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
     * @type {string}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    concurrencyPolicy?: string;
    /**
     * The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
     * @type {number}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    failedJobsHistoryLimit?: number;
    /**
     * 
     * @type {IoK8sApiBatchV1JobTemplateSpec}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    jobTemplate: IoK8sApiBatchV1JobTemplateSpec;
    /**
     * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
     * @type {string}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    schedule: string;
    /**
     * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
     * @type {number}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    startingDeadlineSeconds?: number;
    /**
     * The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.
     * @type {number}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    successfulJobsHistoryLimit?: number;
    /**
     * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
     * @type {boolean}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    suspend?: boolean;
    /**
     * The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
     * @type {string}
     * @memberof IoK8sApiBatchV1CronJobSpec
     */
    timeZone?: string;
}

export function IoK8sApiBatchV1CronJobSpecFromJSON(json: any): IoK8sApiBatchV1CronJobSpec {
    return IoK8sApiBatchV1CronJobSpecFromJSONTyped(json, false);
}

export function IoK8sApiBatchV1CronJobSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiBatchV1CronJobSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'concurrencyPolicy': !exists(json, 'concurrencyPolicy') ? undefined : json['concurrencyPolicy'],
        'failedJobsHistoryLimit': !exists(json, 'failedJobsHistoryLimit') ? undefined : json['failedJobsHistoryLimit'],
        'jobTemplate': IoK8sApiBatchV1JobTemplateSpecFromJSON(json['jobTemplate']),
        'schedule': json['schedule'],
        'startingDeadlineSeconds': !exists(json, 'startingDeadlineSeconds') ? undefined : json['startingDeadlineSeconds'],
        'successfulJobsHistoryLimit': !exists(json, 'successfulJobsHistoryLimit') ? undefined : json['successfulJobsHistoryLimit'],
        'suspend': !exists(json, 'suspend') ? undefined : json['suspend'],
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
    };
}

export function IoK8sApiBatchV1CronJobSpecToJSON(value?: IoK8sApiBatchV1CronJobSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'concurrencyPolicy': value.concurrencyPolicy,
        'failedJobsHistoryLimit': value.failedJobsHistoryLimit,
        'jobTemplate': IoK8sApiBatchV1JobTemplateSpecToJSON(value.jobTemplate),
        'schedule': value.schedule,
        'startingDeadlineSeconds': value.startingDeadlineSeconds,
        'successfulJobsHistoryLimit': value.successfulJobsHistoryLimit,
        'suspend': value.suspend,
        'timeZone': value.timeZone,
    };
}

