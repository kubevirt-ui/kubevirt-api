/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions,
    NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsFromJSON,
    NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsFromJSONTyped,
    NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsToJSON,
} from './';

/**
 * A node selector term, associated with the corresponding weight.
 * @export
 * @interface NMStateSpecAffinityNodeAffinityPreference
 */
export interface NMStateSpecAffinityNodeAffinityPreference {
    /**
     * A list of node selector requirements by node's labels.
     * @type {Array<NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions>}
     * @memberof NMStateSpecAffinityNodeAffinityPreference
     */
    matchExpressions?: Array<NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions>;
    /**
     * A list of node selector requirements by node's fields.
     * @type {Array<NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions>}
     * @memberof NMStateSpecAffinityNodeAffinityPreference
     */
    matchFields?: Array<NMStateSpecAffinityNodeAffinityPreferenceMatchExpressions>;
}

export function NMStateSpecAffinityNodeAffinityPreferenceFromJSON(json: any): NMStateSpecAffinityNodeAffinityPreference {
    return NMStateSpecAffinityNodeAffinityPreferenceFromJSONTyped(json, false);
}

export function NMStateSpecAffinityNodeAffinityPreferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): NMStateSpecAffinityNodeAffinityPreference {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'matchExpressions': !exists(json, 'matchExpressions') ? undefined : ((json['matchExpressions'] as Array<any>).map(NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsFromJSON)),
        'matchFields': !exists(json, 'matchFields') ? undefined : ((json['matchFields'] as Array<any>).map(NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsFromJSON)),
    };
}

export function NMStateSpecAffinityNodeAffinityPreferenceToJSON(value?: NMStateSpecAffinityNodeAffinityPreference | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'matchExpressions': value.matchExpressions === undefined ? undefined : ((value.matchExpressions as Array<any>).map(NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsToJSON)),
        'matchFields': value.matchFields === undefined ? undefined : ((value.matchFields as Array<any>).map(NMStateSpecAffinityNodeAffinityPreferenceMatchExpressionsToJSON)),
    };
}

