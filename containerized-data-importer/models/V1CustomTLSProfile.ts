/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt Containerized Data Importer API
 * Containerized Data Importer for KubeVirt.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * CustomTLSProfile is a user-defined TLS security profile. Be extremely careful using a custom TLS profile as invalid configurations can be catastrophic.
 * @export
 * @interface V1CustomTLSProfile
 */
export interface V1CustomTLSProfile {
    /**
     * ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml):
     * 
     *   ciphers:
     *     - DES-CBC3-SHA
     * @type {Array<string>}
     * @memberof V1CustomTLSProfile
     */
    ciphers: Array<string>;
    /**
     * minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml):
     * 
     *   minTLSVersion: VersionTLS11
     * 
     * NOTE: currently the highest minTLSVersion allowed is VersionTLS12
     * @type {string}
     * @memberof V1CustomTLSProfile
     */
    minTLSVersion: string;
}

export function V1CustomTLSProfileFromJSON(json: any): V1CustomTLSProfile {
    return V1CustomTLSProfileFromJSONTyped(json, false);
}

export function V1CustomTLSProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CustomTLSProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ciphers': json['ciphers'],
        'minTLSVersion': json['minTLSVersion'],
    };
}

export function V1CustomTLSProfileToJSON(value?: V1CustomTLSProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ciphers': value.ciphers,
        'minTLSVersion': value.minTLSVersion,
    };
}

