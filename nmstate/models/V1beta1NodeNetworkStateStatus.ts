/* tslint:disable */
/* eslint-disable */
/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  V1NodeNetworkConfigurationPolicyStatusConditions,
  V1NodeNetworkConfigurationPolicyStatusConditionsFromJSON,
  V1NodeNetworkConfigurationPolicyStatusConditionsFromJSONTyped,
  V1NodeNetworkConfigurationPolicyStatusConditionsToJSON,
} from './';

/**
 * V1beta1NodeNetworkStateStatus is the status of the V1beta1NodeNetworkState of a specific node
 * @export
 * @interface V1beta1NodeNetworkStateStatus
 */
export interface V1beta1NodeNetworkStateStatus {
  /**
   *
   * @type {Array<V1NodeNetworkConfigurationPolicyStatusConditions>}
   * @memberof V1beta1NodeNetworkStateStatus
   */
  conditions?: Array<V1NodeNetworkConfigurationPolicyStatusConditions>;
  /**
   * State contains the namestatectl yaml [1] as string instead of golang struct so we don't need to be in sync with the schema.
   *  [1] https://github.com/nmstate/nmstate/blob/base/libnmstate/schemas/operational-state.yaml
   * @type {object}
   * @memberof V1beta1NodeNetworkStateStatus
   */
  currentState?: object;
  /**
   *
   * @type {string}
   * @memberof V1beta1NodeNetworkStateStatus
   */
  handlerNetworkManagerVersion?: string;
  /**
   *
   * @type {string}
   * @memberof V1beta1NodeNetworkStateStatus
   */
  handlerNmstateVersion?: string;
  /**
   *
   * @type {string}
   * @memberof V1beta1NodeNetworkStateStatus
   */
  hostNetworkManagerVersion?: string;
  /**
   *
   * @type {string}
   * @memberof V1beta1NodeNetworkStateStatus
   */
  lastSuccessfulUpdateTime?: string;
}

export function V1beta1NodeNetworkStateStatusFromJSON(json: any): V1beta1NodeNetworkStateStatus {
  return V1beta1NodeNetworkStateStatusFromJSONTyped(json, false);
}

export function V1beta1NodeNetworkStateStatusFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1beta1NodeNetworkStateStatus {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    conditions: !exists(json, 'conditions')
      ? undefined
      : (json['conditions'] as Array<any>).map(
          V1NodeNetworkConfigurationPolicyStatusConditionsFromJSON,
        ),
    currentState: !exists(json, 'currentState') ? undefined : json['currentState'],
    handlerNetworkManagerVersion: !exists(json, 'handlerNetworkManagerVersion')
      ? undefined
      : json['handlerNetworkManagerVersion'],
    handlerNmstateVersion: !exists(json, 'handlerNmstateVersion')
      ? undefined
      : json['handlerNmstateVersion'],
    hostNetworkManagerVersion: !exists(json, 'hostNetworkManagerVersion')
      ? undefined
      : json['hostNetworkManagerVersion'],
    lastSuccessfulUpdateTime: !exists(json, 'lastSuccessfulUpdateTime')
      ? undefined
      : json['lastSuccessfulUpdateTime'],
  };
}

export function V1beta1NodeNetworkStateStatusToJSON(
  value?: V1beta1NodeNetworkStateStatus | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    conditions:
      value.conditions === undefined
        ? undefined
        : (value.conditions as Array<any>).map(
            V1NodeNetworkConfigurationPolicyStatusConditionsToJSON,
          ),
    currentState: value.currentState,
    handlerNetworkManagerVersion: value.handlerNetworkManagerVersion,
    handlerNmstateVersion: value.handlerNmstateVersion,
    hostNetworkManagerVersion: value.hostNetworkManagerVersion,
    lastSuccessfulUpdateTime:
      value.lastSuccessfulUpdateTime === undefined ? undefined : value.lastSuccessfulUpdateTime,
  };
}
