/* tslint:disable */
/* eslint-disable */
/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * V1NodeNetworkConfigurationPolicySpec defines the desired state of V1NodeNetworkConfigurationPolicy
 * @export
 * @interface V1NodeNetworkConfigurationPolicySpec
 */
export interface V1NodeNetworkConfigurationPolicySpec {
  /**
   * Capture contains expressions with an associated name than can be referenced at the DesiredState.
   * @type {{ [key: string]: string; }}
   * @memberof V1NodeNetworkConfigurationPolicySpec
   */
  capture?: { [key: string]: string };
  /**
   * The desired configuration of the policy
   * @type {object}
   * @memberof V1NodeNetworkConfigurationPolicySpec
   */
  desiredState?: object;
  /**
   * MaxUnavailable specifies percentage or number of machines that can be updating at a time. Default is "50%".
   * @type {number | string}
   * @memberof V1NodeNetworkConfigurationPolicySpec
   */
  maxUnavailable?: number | string | null;
  /**
   * NodeSelector is a selector which must be true for the policy to be applied to the node. Selector which must match a node's labels for the policy to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
   * @type {{ [key: string]: string; }}
   * @memberof V1NodeNetworkConfigurationPolicySpec
   */
  nodeSelector?: { [key: string]: string };
}

export function V1NodeNetworkConfigurationPolicySpecFromJSON(
  json: any,
): V1NodeNetworkConfigurationPolicySpec {
  return V1NodeNetworkConfigurationPolicySpecFromJSONTyped(json, false);
}

export function V1NodeNetworkConfigurationPolicySpecFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1NodeNetworkConfigurationPolicySpec {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    capture: !exists(json, 'capture') ? undefined : json['capture'],
    desiredState: !exists(json, 'desiredState') ? undefined : json['desiredState'],
    maxUnavailable: !exists(json, 'maxUnavailable') ? undefined : json['maxUnavailable'],
    nodeSelector: !exists(json, 'nodeSelector') ? undefined : json['nodeSelector'],
  };
}

export function V1NodeNetworkConfigurationPolicySpecToJSON(
  value?: V1NodeNetworkConfigurationPolicySpec | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    capture: value.capture,
    desiredState: value.desiredState,
    maxUnavailable: value.maxUnavailable,
    nodeSelector: value.nodeSelector,
  };
}
