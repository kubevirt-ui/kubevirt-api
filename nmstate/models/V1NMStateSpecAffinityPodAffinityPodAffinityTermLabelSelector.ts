/* tslint:disable */
/* eslint-disable */
/**
 *
 *
 *
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions,
  V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSON,
  V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSONTyped,
  V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsToJSON,
} from './';

/**
 * A label query over a set of resources, in this case pods.
 * @export
 * @interface V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector
 */
export interface V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   * @type {Array<V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions>}
   * @memberof V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector
   */
  matchExpressions?: Array<V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressions>;
  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   * @type {{ [key: string]: string; }}
   * @memberof V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector
   */
  matchLabels?: { [key: string]: string };
}

export function V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorFromJSON(
  json: any,
): V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector {
  return V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorFromJSONTyped(json, false);
}

export function V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorFromJSONTyped(
  json: any,
  _ignoreDiscriminator: boolean,
): V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    matchExpressions: !exists(json, 'matchExpressions')
      ? undefined
      : (json['matchExpressions'] as Array<any>).map(
          V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsFromJSON,
        ),
    matchLabels: !exists(json, 'matchLabels') ? undefined : json['matchLabels'],
  };
}

export function V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorToJSON(
  value?: V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelector | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    matchExpressions:
      value.matchExpressions === undefined
        ? undefined
        : (value.matchExpressions as Array<any>).map(
            V1NMStateSpecAffinityPodAffinityPodAffinityTermLabelSelectorMatchExpressionsToJSON,
          ),
    matchLabels: value.matchLabels,
  };
}
